[!] Bug of fetching the up/down spins

* This bug only appears when solving Number Partition Problem

* There exists a bug since qmc_u50.backup.3.cpp to qmc_u50.backup.6.cpp
* Two loop UPDATE_UP_SPIN and UPDATE_DOWN_SPIN (split from the UPDATE_INPUT_STAGE in qmc_u50.backup.2.cpp) looks like doesn't work normally.
* Fixed in qmc_u50.backup.7.cpp (based on qmc_u50.backup.5.cpp and UPDATE_INPUT_STAGE from qmc_u50.backup.2.cpp)

Replace

```
        // Update offset, h_local, log_rand_local
    UPDATE_OFST_H_LRN:
        for (u32_t t = 0; t < NUM_TROT; t++) {
#pragma HLS UNROLL
            u32_t ofst = ((stage + NUM_SPIN - t) & (NUM_SPIN - 1));

            // offset
            state[t].i_pack = (ofst >> (LOG2_PACKET_SIZE));
            state[t].i_spin = (ofst & (PACKET_SIZE - 1));

            // h, lrn
            state[t].h_local        = h[ofst];
            state[t].log_rand_local = log_rand[t][ofst];
        }

        // Update up_spin
    UPDATE_UP_SPIN:
        for (u32_t t = 1; t < NUM_TROT; t++) {
#pragma HLS UNROLL
            state[t].up_spin =
                trotters_local[t - 1][state[t].i_pack][state[t].i_spin];
        }
        state[0].up_spin =
            trotters_local[NUM_TROT - 1][state[0].i_pack][state[0].i_pack];

        // Update down_spin
    UPDATE_DOWN_SPIN:
        for (u32_t t = 0; t < NUM_TROT - 1; t++) {
#pragma HLS UNROLL
            state[t].down_spin =
                trotters_local[t + 1][state[t].i_pack][state[t].i_spin];
        }
        state[NUM_TROT - 1].down_spin =
            trotters_local[0][state[NUM_TROT - 1].i_pack]
                          [state[NUM_TROT - 1].i_spin];
```

To

```
// Update offset, h_local, log_rand_local
    UPDATE_OFST_H_LRN:
        for (u32_t t = 0; t < NUM_TROT; t++) {
#pragma HLS UNROLL
            u32_t ofst = ((stage + NUM_SPIN - t) & (NUM_SPIN - 1));

            // offset
            state[t].i_pack = (ofst >> (LOG2_PACKET_SIZE));
            state[t].i_spin = (ofst & (PACKET_SIZE - 1));

            // h, lrn
            state[t].h_local        = h[ofst];
            state[t].log_rand_local = log_rand[t][ofst];

            // up/down spin
            u32_t up   = (t == 0) ? (NUM_TROT - 1) : (t - 1);
            u32_t down = (t == NUM_TROT - 1) ? (0) : (t + 1);
            state[t].up_spin =
                trotters_local[up][state[t].i_pack][state[t].i_spin];
            state[t].down_spin =
                trotters_local[down][state[t].i_pack][state[t].i_spin];
        }
```

---

[!] Version 7.1 Published

* Based on version 7

```
* NUM_TROT 4
* NUM_SPIN 4096
* PACKET_SIZE 64
* LOG2_PACKET_SIZE 6
* NUM_STREAM 2
* LOG2_NUM_STREAM 1
* HALF_NUM_STREAM 1
* NUM_FADD 64
```

* Interface for jcoup is one channel
[+] Add Prefetching for jcoup 
[+] Overlap the Execution Time of TU and READ_JCOUP

for stage:
    UPDATE_STATE
    SHIFT_JCOUP
    READ_JCOUP <- This order is important
    RUN_TU     <- This order is important
    RUN_TU_FINAL

---

[!] Version 7.2 Published

* Based on version 7.1

[+] Add Prefetching for h and log_rand
[+] Overlap the Execution Time of TU_FINAL
    - four TU_FINAL since version 7.1 is fully parallel
        - The dependency of 'state' is eliminated by prefetching of h and lr
    - four TU       since version 7 is fully parallel
        - The dependency between TU[0] and Jcoup[0] is eliminated by prefetching of jcoup

[+] Limit the usage of number fadd to 32
    - Reduce resouce usage
    - Doesn't affect the latency
    - Since the execution time of TU is hiden by the READ_JCOUP

---

[!] Version 7.2.c2

* Based on version 7.2

[+] Interface of Jcoup is 2 Channels
[+] From I/O Bound to Computational Bound
    - Add more fadd : NUM_FADD = 64 now

---

[!] Version 7.2.c4

* Based on version 7.2

```
* NUM_TROT 4
* NUM_SPIN 4096
* PACKET_SIZE 64
* LOG2_PACKET_SIZE 6
* NUM_STREAM 4
* LOG2_NUM_STREAM 2
* HALF_NUM_STREAM 1
* NUM_FADD 128
```

[+] Interface of Jcoup is 4 Channels
[+] From I/O Bound to Computational Bound
    - Add more fadd : NUM_FADD = 128 now
-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity QuantumMonteCarloU50 is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of QuantumMonteCarloU50 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "QuantumMonteCarloU50_QuantumMonteCarloU50,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=19560433,HLS_SYN_TPT=none,HLS_SYN_MEM=152,HLS_SYN_DSP=0,HLS_SYN_FF=933591,HLS_SYN_LUT=559471,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (100 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (100 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (100 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (100 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (100 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (100 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (100 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (100 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (100 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (100 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (100 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (100 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_41000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000000000000000000000000";
    constant ap_const_lv64_200 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000";
    constant ap_const_lv64_400 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_const_lv64_600 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000011000000000";
    constant ap_const_lv13_1003 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000011";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_FFE : STD_LOGIC_VECTOR (11 downto 0) := "111111111110";
    constant ap_const_lv12_FFD : STD_LOGIC_VECTOR (11 downto 0) := "111111111101";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (100 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal trotters : STD_LOGIC_VECTOR (63 downto 0);
    signal Jcoup : STD_LOGIC_VECTOR (63 downto 0);
    signal h : STD_LOGIC_VECTOR (63 downto 0);
    signal Jperp : STD_LOGIC_VECTOR (31 downto 0);
    signal Beta : STD_LOGIC_VECTOR (31 downto 0);
    signal logRand : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal gmem2_blk_n_AR : STD_LOGIC;
    signal gmem2_blk_n_R : STD_LOGIC;
    signal gmem3_blk_n_AR : STD_LOGIC;
    signal gmem3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dHTunnel_reg_1677 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_1682 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_1650_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_1650_reg_1690 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_1651_fu_580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_1651_reg_1698 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln225_fu_586_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln225_reg_1706 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln226_fu_590_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln226_reg_1714 : STD_LOGIC_VECTOR (5 downto 0);
    signal stage_1_reg_1722 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln205_fu_603_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln205_reg_1731 : STD_LOGIC_VECTOR (12 downto 0);
    signal Ofst_fu_609_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal Ofst_reg_1736 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln205_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_613_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln_reg_1743 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln2_reg_1748 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln819_1_reg_1753 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln225_6_reg_1758 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln226_4_reg_1763 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln215_1_reg_1786 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_3_fu_764_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_3_reg_1792 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_8_reg_1797 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln4_reg_1802 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln819_2_reg_1813 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln819_3_reg_1818 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln215_2_reg_1835 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_7_fu_910_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_7_reg_1841 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_s_reg_1846 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln226_6_reg_1851 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln215_3_reg_1856 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_13_fu_985_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_13_reg_1862 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_11_reg_1867 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln226_8_reg_1872 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln819_4_reg_1901 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln819_5_reg_1906 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln819_6_reg_1935 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln819_7_reg_1940 : STD_LOGIC_VECTOR (57 downto 0);
    signal spinOfst_4_fu_1219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal spinOfst_4_reg_1957 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln216_fu_1222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln216_reg_1965 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1970 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_addr_read_reg_1975 : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem3_addr_read_reg_1980 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_2_fu_1234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_1985 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln225_2_fu_1274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln225_2_reg_1990 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_1_fu_1300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_1_reg_1995 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_1_read_reg_2000 : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem3_addr_1_read_reg_2005 : STD_LOGIC_VECTOR (511 downto 0);
    signal spinOfst_fu_1304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal spinOfst_reg_2010 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln216_1_fu_1309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln216_1_reg_2015 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_1313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_2020 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln225_5_fu_1350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln225_5_reg_2025 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_2_fu_1376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_2_reg_2030 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_2_read_reg_2035 : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem3_addr_2_read_reg_2040 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_4_fu_1380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_2045 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln225_12_fu_1416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln225_12_reg_2050 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_3_fu_1442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_3_reg_2055 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_3_read_reg_2060 : STD_LOGIC_VECTOR (511 downto 0);
    signal add_ln225_7_fu_1453_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln225_7_reg_2065 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem3_addr_3_read_reg_2070 : STD_LOGIC_VECTOR (511 downto 0);
    signal add_ln226_7_fu_1458_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln226_7_reg_2075 : STD_LOGIC_VECTOR (5 downto 0);
    signal spinOfst_2_fu_1463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal spinOfst_2_reg_2080 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln216_2_fu_1468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln216_2_reg_2085 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_1472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_reg_2090 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln225_14_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln225_14_reg_2095 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_5_fu_1516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln226_5_reg_2100 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_1520_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_2105 : STD_LOGIC_VECTOR (0 downto 0);
    signal spinOfst_3_fu_1527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal spinOfst_3_reg_2110 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln216_3_fu_1532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln216_3_reg_2115 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_fu_1536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_2120 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln214_fu_1555_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln214_reg_2125 : STD_LOGIC_VECTOR (63 downto 0);
    signal dH_0_fu_1561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_0_reg_2130 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_fu_1564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_reg_2135 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_1_fu_1567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_1_reg_2140 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_1_fu_1570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_1_reg_2145 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_2_fu_1573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_2_reg_2150 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_2_fu_1576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_2_reg_2155 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_1579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_2160 : STD_LOGIC_VECTOR (0 downto 0);
    signal dH_3_fu_1586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_3_reg_2165 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_3_fu_1589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln226_3_reg_2170 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_2175 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_reg_2179 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln251_fu_1610_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln251_reg_2184 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal packOfst_fu_1621_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal packOfst_reg_2192 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnit_fu_500_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_0_1_reg_2197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal dH_1_1_reg_2202 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal dH_2_1_reg_2207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal JcoupLocal_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal JcoupLocal_0_ce0 : STD_LOGIC;
    signal JcoupLocal_0_q0 : STD_LOGIC_VECTOR (16383 downto 0);
    signal JcoupLocal_0_ce1 : STD_LOGIC;
    signal JcoupLocal_0_we1 : STD_LOGIC;
    signal JcoupLocal_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal JcoupLocal_1_ce0 : STD_LOGIC;
    signal JcoupLocal_1_q0 : STD_LOGIC_VECTOR (16383 downto 0);
    signal JcoupLocal_1_ce1 : STD_LOGIC;
    signal JcoupLocal_1_we1 : STD_LOGIC;
    signal JcoupLocal_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal JcoupLocal_2_ce0 : STD_LOGIC;
    signal JcoupLocal_2_q0 : STD_LOGIC_VECTOR (16383 downto 0);
    signal JcoupLocal_2_ce1 : STD_LOGIC;
    signal JcoupLocal_2_we1 : STD_LOGIC;
    signal JcoupLocal_3_ce0 : STD_LOGIC;
    signal JcoupLocal_3_q0 : STD_LOGIC_VECTOR (16383 downto 0);
    signal JcoupLocal_3_ce1 : STD_LOGIC;
    signal JcoupLocal_3_we1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_done : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_idle : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_ready : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WVALID : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WLAST : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_RREADY : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_BREADY : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce0 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_we1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_d1 : STD_LOGIC_VECTOR (16383 downto 0);
    signal grp_TrotterUnit_fu_500_ap_start : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_ap_done : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_ap_idle : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_ap_ready : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_t_offset : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_trotters : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnit_fu_500_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TrotterUnit_fu_500_dH_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TrotterUnit_fu_500_JcoupLocal_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnit_fu_500_JcoupLocal_ce0 : STD_LOGIC;
    signal grp_TrotterUnit_fu_500_JcoupLocal_q0 : STD_LOGIC_VECTOR (16383 downto 0);
    signal grp_TrotterUnitFinal_fu_525_ap_start : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_ap_done : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_ap_idle : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_ap_ready : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_t : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnitFinal_fu_525_iPack : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnitFinal_fu_525_iSpin : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_TrotterUnitFinal_fu_525_trotters : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_TrotterUnitFinal_fu_525_dH : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_TrotterUnitFinal_fu_525_upSpin : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_downSpin : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_TrotterUnitFinal_fu_525_logRandNumber : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_done : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_idle : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_ready : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce0 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_we1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_d1 : STD_LOGIC_VECTOR (16383 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_ce1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_we1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_d1 : STD_LOGIC_VECTOR (16383 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce0 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_we1 : STD_LOGIC;
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_d1 : STD_LOGIC_VECTOR (16383 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_ce0 : STD_LOGIC;
    signal gmem0_AWVALID : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WVALID : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BREADY : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARVALID : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RREADY : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARVALID : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RREADY : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARVALID : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RREADY : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem3_RLAST : STD_LOGIC;
    signal gmem3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dH_1_0_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_block_state85_on_subcall_done : BOOLEAN;
    signal dH_0_0_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_2_0_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal dH_3_0_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal packOfst_1_reg_480 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start_reg : STD_LOGIC := '0';
    signal grp_TrotterUnit_fu_500_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln251_fu_1615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_TrotterUnitFinal_fu_525_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln819_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln226_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln819_1_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_1_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln226_1_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln819_2_fu_1037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_2_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln226_2_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln819_3_fu_1067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_3_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln226_3_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln819_4_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln819_5_fu_1148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln819_6_fu_1199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln819_7_fu_1209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state77 : BOOLEAN;
    signal ap_block_state78 : BOOLEAN;
    signal ap_block_state79 : BOOLEAN;
    signal ap_block_state80 : BOOLEAN;
    signal stage_fu_192 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln1_fu_623_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln819_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_fu_635_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_1_fu_650_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln2_fu_665_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln225_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln225_fu_677_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln226_fu_692_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ofst_1_fu_737_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln225_2_fu_752_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln225_2_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln225_1_fu_768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_783_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln226_1_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln226_2_fu_797_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln819_1_fu_822_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln819_1_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_2_fu_833_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_3_fu_848_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ofst_2_fu_883_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln225_4_fu_898_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln225_4_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln225_2_fu_914_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln226_1_fu_929_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln226_3_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln226_4_fu_943_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ofst_3_fu_958_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln225_6_fu_973_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln225_6_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln225_3_fu_989_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln226_2_fu_1004_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln226_4_fu_1014_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln226_5_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln226_6_fu_1022_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln819_2_fu_1077_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln819_2_fu_1084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_4_fu_1088_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_5_fu_1103_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln819_3_fu_1158_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln819_3_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_6_fu_1169_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln819_7_fu_1184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln225_1_fu_1241_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln225_4_fu_1244_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln225_4_fu_1252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln225_1_fu_1257_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln225_1_fu_1265_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln225_fu_1269_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal add_ln226_1_fu_1278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln3_fu_1283_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln226_fu_1291_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln226_fu_1295_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln3_fu_1321_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln225_5_fu_1328_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln225_3_fu_1333_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln225_3_fu_1341_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln225_1_fu_1345_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal add_ln226_3_fu_1354_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln226_1_fu_1359_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln226_2_fu_1367_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln226_1_fu_1371_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln225_9_fu_1387_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln225_6_fu_1394_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln225_5_fu_1399_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln225_5_fu_1407_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln225_2_fu_1411_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal add_ln226_5_fu_1420_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln226_2_fu_1425_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln226_4_fu_1433_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln226_2_fu_1437_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln225_10_fu_1446_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln225_7_fu_1480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln225_7_fu_1487_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln225_3_fu_1491_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln226_3_fu_1500_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln226_6_fu_1507_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln226_3_fu_1511_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln_fu_1544_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln214_fu_1551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (100 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_block_state95_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component QuantumMonteCarloU50_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        add_ln214 : IN STD_LOGIC_VECTOR (63 downto 0);
        sext_ln232 : IN STD_LOGIC_VECTOR (57 downto 0);
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        JcoupLocal_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_0_ce0 : OUT STD_LOGIC;
        JcoupLocal_0_q0 : IN STD_LOGIC_VECTOR (16383 downto 0);
        JcoupLocal_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_0_ce1 : OUT STD_LOGIC;
        JcoupLocal_0_we1 : OUT STD_LOGIC;
        JcoupLocal_0_d1 : OUT STD_LOGIC_VECTOR (16383 downto 0) );
    end component;


    component QuantumMonteCarloU50_TrotterUnit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        stage : IN STD_LOGIC_VECTOR (12 downto 0);
        packOfst : IN STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        trotters : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        dH_read : IN STD_LOGIC_VECTOR (31 downto 0);
        JcoupLocal_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_ce0 : OUT STD_LOGIC;
        JcoupLocal_q0 : IN STD_LOGIC_VECTOR (16383 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_TrotterUnitFinal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t : IN STD_LOGIC_VECTOR (1 downto 0);
        stage : IN STD_LOGIC_VECTOR (12 downto 0);
        iPack : IN STD_LOGIC_VECTOR (2 downto 0);
        iSpin : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        trotters : IN STD_LOGIC_VECTOR (63 downto 0);
        dH : IN STD_LOGIC_VECTOR (31 downto 0);
        upSpin : IN STD_LOGIC_VECTOR (0 downto 0);
        downSpin : IN STD_LOGIC_VECTOR (0 downto 0);
        Beta : IN STD_LOGIC_VECTOR (31 downto 0);
        dHTunnel : IN STD_LOGIC_VECTOR (31 downto 0);
        logRandNumber : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        JcoupLocal_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_2_ce0 : OUT STD_LOGIC;
        JcoupLocal_2_q0 : IN STD_LOGIC_VECTOR (16383 downto 0);
        JcoupLocal_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_2_ce1 : OUT STD_LOGIC;
        JcoupLocal_2_we1 : OUT STD_LOGIC;
        JcoupLocal_2_d1 : OUT STD_LOGIC_VECTOR (16383 downto 0);
        JcoupLocal_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_3_ce1 : OUT STD_LOGIC;
        JcoupLocal_3_we1 : OUT STD_LOGIC;
        JcoupLocal_3_d1 : OUT STD_LOGIC_VECTOR (16383 downto 0);
        JcoupLocal_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_1_ce0 : OUT STD_LOGIC;
        JcoupLocal_1_q0 : IN STD_LOGIC_VECTOR (16383 downto 0);
        JcoupLocal_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_1_ce1 : OUT STD_LOGIC;
        JcoupLocal_1_we1 : OUT STD_LOGIC;
        JcoupLocal_1_d1 : OUT STD_LOGIC_VECTOR (16383 downto 0);
        JcoupLocal_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        JcoupLocal_0_ce0 : OUT STD_LOGIC;
        JcoupLocal_0_q0 : IN STD_LOGIC_VECTOR (16383 downto 0) );
    end component;


    component QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_JcoupLocal_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16383 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (16383 downto 0) );
    end component;


    component QuantumMonteCarloU50_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        trotters : OUT STD_LOGIC_VECTOR (63 downto 0);
        Jcoup : OUT STD_LOGIC_VECTOR (63 downto 0);
        h : OUT STD_LOGIC_VECTOR (63 downto 0);
        Jperp : OUT STD_LOGIC_VECTOR (31 downto 0);
        Beta : OUT STD_LOGIC_VECTOR (31 downto 0);
        logRand : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component QuantumMonteCarloU50_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component QuantumMonteCarloU50_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component QuantumMonteCarloU50_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component QuantumMonteCarloU50_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    JcoupLocal_0_U : component QuantumMonteCarloU50_JcoupLocal_0
    generic map (
        DataWidth => 16384,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => JcoupLocal_0_address0,
        ce0 => JcoupLocal_0_ce0,
        q0 => JcoupLocal_0_q0,
        address1 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_address1,
        ce1 => JcoupLocal_0_ce1,
        we1 => JcoupLocal_0_we1,
        d1 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_d1);

    JcoupLocal_1_U : component QuantumMonteCarloU50_JcoupLocal_0
    generic map (
        DataWidth => 16384,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => JcoupLocal_1_address0,
        ce0 => JcoupLocal_1_ce0,
        q0 => JcoupLocal_1_q0,
        address1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_address1,
        ce1 => JcoupLocal_1_ce1,
        we1 => JcoupLocal_1_we1,
        d1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_d1);

    JcoupLocal_2_U : component QuantumMonteCarloU50_JcoupLocal_0
    generic map (
        DataWidth => 16384,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => JcoupLocal_2_address0,
        ce0 => JcoupLocal_2_ce0,
        q0 => JcoupLocal_2_q0,
        address1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_address1,
        ce1 => JcoupLocal_2_ce1,
        we1 => JcoupLocal_2_we1,
        d1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_d1);

    JcoupLocal_3_U : component QuantumMonteCarloU50_JcoupLocal_0
    generic map (
        DataWidth => 16384,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_TrotterUnit_fu_500_JcoupLocal_address0,
        ce0 => JcoupLocal_3_ce0,
        q0 => JcoupLocal_3_q0,
        address1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_address1,
        ce1 => JcoupLocal_3_ce1,
        we1 => JcoupLocal_3_we1,
        d1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_d1);

    grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491 : component QuantumMonteCarloU50_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start,
        ap_done => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_done,
        ap_idle => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_idle,
        ap_ready => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_ready,
        add_ln214 => add_ln214_reg_2125,
        sext_ln232 => trunc_ln5_reg_2179,
        m_axi_gmem1_AWVALID => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => gmem1_RLAST,
        m_axi_gmem1_RID => gmem1_RID,
        m_axi_gmem1_RUSER => gmem1_RUSER,
        m_axi_gmem1_RRESP => gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        JcoupLocal_0_address0 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_address0,
        JcoupLocal_0_ce0 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce0,
        JcoupLocal_0_q0 => JcoupLocal_0_q0,
        JcoupLocal_0_address1 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_address1,
        JcoupLocal_0_ce1 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce1,
        JcoupLocal_0_we1 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_we1,
        JcoupLocal_0_d1 => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_d1);

    grp_TrotterUnit_fu_500 : component QuantumMonteCarloU50_TrotterUnit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_TrotterUnit_fu_500_ap_start,
        ap_done => grp_TrotterUnit_fu_500_ap_done,
        ap_idle => grp_TrotterUnit_fu_500_ap_idle,
        ap_ready => grp_TrotterUnit_fu_500_ap_ready,
        t_offset => grp_TrotterUnit_fu_500_t_offset,
        stage => stage_1_reg_1722,
        packOfst => trunc_ln251_reg_2184,
        m_axi_gmem0_AWVALID => grp_TrotterUnit_fu_500_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_TrotterUnit_fu_500_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_TrotterUnit_fu_500_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_TrotterUnit_fu_500_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_TrotterUnit_fu_500_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_TrotterUnit_fu_500_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_TrotterUnit_fu_500_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_TrotterUnit_fu_500_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_TrotterUnit_fu_500_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_TrotterUnit_fu_500_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_TrotterUnit_fu_500_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_TrotterUnit_fu_500_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_TrotterUnit_fu_500_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_TrotterUnit_fu_500_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_TrotterUnit_fu_500_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_TrotterUnit_fu_500_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_TrotterUnit_fu_500_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_TrotterUnit_fu_500_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_TrotterUnit_fu_500_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_TrotterUnit_fu_500_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_TrotterUnit_fu_500_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_TrotterUnit_fu_500_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_TrotterUnit_fu_500_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_TrotterUnit_fu_500_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_TrotterUnit_fu_500_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_TrotterUnit_fu_500_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_TrotterUnit_fu_500_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_TrotterUnit_fu_500_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_TrotterUnit_fu_500_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_TrotterUnit_fu_500_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_TrotterUnit_fu_500_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_TrotterUnit_fu_500_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        trotters => grp_TrotterUnit_fu_500_trotters,
        p_read => grp_TrotterUnit_fu_500_p_read,
        dH_read => grp_TrotterUnit_fu_500_dH_read,
        JcoupLocal_address0 => grp_TrotterUnit_fu_500_JcoupLocal_address0,
        JcoupLocal_ce0 => grp_TrotterUnit_fu_500_JcoupLocal_ce0,
        JcoupLocal_q0 => grp_TrotterUnit_fu_500_JcoupLocal_q0,
        ap_return => grp_TrotterUnit_fu_500_ap_return);

    grp_TrotterUnitFinal_fu_525 : component QuantumMonteCarloU50_TrotterUnitFinal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_TrotterUnitFinal_fu_525_ap_start,
        ap_done => grp_TrotterUnitFinal_fu_525_ap_done,
        ap_idle => grp_TrotterUnitFinal_fu_525_ap_idle,
        ap_ready => grp_TrotterUnitFinal_fu_525_ap_ready,
        t => grp_TrotterUnitFinal_fu_525_t,
        stage => stage_1_reg_1722,
        iPack => grp_TrotterUnitFinal_fu_525_iPack,
        iSpin => grp_TrotterUnitFinal_fu_525_iSpin,
        m_axi_gmem0_AWVALID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => gmem0_AWREADY,
        m_axi_gmem0_AWADDR => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => gmem0_WREADY,
        m_axi_gmem0_WDATA => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => gmem0_BVALID,
        m_axi_gmem0_BREADY => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => gmem0_BRESP,
        m_axi_gmem0_BID => gmem0_BID,
        m_axi_gmem0_BUSER => gmem0_BUSER,
        trotters => grp_TrotterUnitFinal_fu_525_trotters,
        dH => grp_TrotterUnitFinal_fu_525_dH,
        upSpin => grp_TrotterUnitFinal_fu_525_upSpin,
        downSpin => grp_TrotterUnitFinal_fu_525_downSpin,
        Beta => Beta,
        dHTunnel => dHTunnel_reg_1677,
        logRandNumber => grp_TrotterUnitFinal_fu_525_logRandNumber);

    grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550 : component QuantumMonteCarloU50_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start,
        ap_done => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_done,
        ap_idle => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_idle,
        ap_ready => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_ready,
        JcoupLocal_2_address0 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_address0,
        JcoupLocal_2_ce0 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce0,
        JcoupLocal_2_q0 => JcoupLocal_2_q0,
        JcoupLocal_2_address1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_address1,
        JcoupLocal_2_ce1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce1,
        JcoupLocal_2_we1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_we1,
        JcoupLocal_2_d1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_d1,
        JcoupLocal_3_address1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_address1,
        JcoupLocal_3_ce1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_ce1,
        JcoupLocal_3_we1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_we1,
        JcoupLocal_3_d1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_d1,
        JcoupLocal_1_address0 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_address0,
        JcoupLocal_1_ce0 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce0,
        JcoupLocal_1_q0 => JcoupLocal_1_q0,
        JcoupLocal_1_address1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_address1,
        JcoupLocal_1_ce1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce1,
        JcoupLocal_1_we1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_we1,
        JcoupLocal_1_d1 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_d1,
        JcoupLocal_0_address0 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_address0,
        JcoupLocal_0_ce0 => grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_ce0,
        JcoupLocal_0_q0 => JcoupLocal_0_q0);

    control_s_axi_U : component QuantumMonteCarloU50_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        trotters => trotters,
        Jcoup => Jcoup,
        h => h,
        Jperp => Jperp,
        Beta => Beta,
        logRand => logRand,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component QuantumMonteCarloU50_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_ARADDR,
        I_ARID => gmem0_ARID,
        I_ARLEN => gmem0_ARLEN,
        I_ARSIZE => gmem0_ARSIZE,
        I_ARLOCK => gmem0_ARLOCK,
        I_ARCACHE => gmem0_ARCACHE,
        I_ARQOS => gmem0_ARQOS,
        I_ARPROT => gmem0_ARPROT,
        I_ARUSER => gmem0_ARUSER,
        I_ARBURST => gmem0_ARBURST,
        I_ARREGION => gmem0_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWADDR,
        I_AWID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWID,
        I_AWLEN => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWLEN,
        I_AWSIZE => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWSIZE,
        I_AWLOCK => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWLOCK,
        I_AWCACHE => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWCACHE,
        I_AWQOS => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWQOS,
        I_AWPROT => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWPROT,
        I_AWUSER => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWUSER,
        I_AWBURST => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWBURST,
        I_AWREGION => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWREGION,
        I_WVALID => gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WDATA,
        I_WID => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WID,
        I_WUSER => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WUSER,
        I_WLAST => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WLAST,
        I_WSTRB => grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WSTRB,
        I_BVALID => gmem0_BVALID,
        I_BREADY => gmem0_BREADY,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gmem1_m_axi_U : component QuantumMonteCarloU50_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARADDR,
        I_ARID => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARID,
        I_ARLEN => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARLEN,
        I_ARSIZE => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARSIZE,
        I_ARLOCK => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARLOCK,
        I_ARCACHE => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARCACHE,
        I_ARQOS => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARQOS,
        I_ARPROT => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARPROT,
        I_ARUSER => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARUSER,
        I_ARBURST => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARBURST,
        I_ARREGION => grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    gmem2_m_axi_U : component QuantumMonteCarloU50_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem2_ARVALID,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => gmem2_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => gmem2_RREADY,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem2_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    gmem3_m_axi_U : component QuantumMonteCarloU50_gmem3_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem3_ARVALID,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => gmem3_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem3_RVALID,
        I_RREADY => gmem3_RREADY,
        I_RDATA => gmem3_RDATA,
        I_RID => gmem3_RID,
        I_RUSER => gmem3_RUSER,
        I_RRESP => gmem3_RRESP,
        I_RLAST => gmem3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem3_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem3_BRESP,
        I_BID => gmem3_BID,
        I_BUSER => gmem3_BUSER);

    fmul_32ns_32ns_32_4_max_dsp_1_U104 : component QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => Jperp,
        din1 => ap_const_lv32_41000000,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln205_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_1592_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84) and (gmem0_RVALID = ap_const_logic_1))) then 
                    grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_ready = ap_const_logic_1)) then 
                    grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                    grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_ready = ap_const_logic_1)) then 
                    grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_TrotterUnitFinal_fu_525_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_TrotterUnitFinal_fu_525_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                    grp_TrotterUnitFinal_fu_525_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_TrotterUnitFinal_fu_525_ap_ready = ap_const_logic_1)) then 
                    grp_TrotterUnitFinal_fu_525_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_TrotterUnit_fu_500_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_TrotterUnit_fu_500_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
                    grp_TrotterUnit_fu_500_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_TrotterUnit_fu_500_ap_ready = ap_const_logic_1)) then 
                    grp_TrotterUnit_fu_500_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    dH_0_0_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                dH_0_0_reg_450 <= dH_0_1_reg_2197;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_on_subcall_done))) then 
                dH_0_0_reg_450 <= dH_0_reg_2130;
            end if; 
        end if;
    end process;

    dH_1_0_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                dH_1_0_reg_440 <= dH_1_1_reg_2202;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_on_subcall_done))) then 
                dH_1_0_reg_440 <= dH_1_reg_2140;
            end if; 
        end if;
    end process;

    dH_2_0_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                dH_2_0_reg_460 <= dH_2_1_reg_2207;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_on_subcall_done))) then 
                dH_2_0_reg_460 <= dH_2_reg_2150;
            end if; 
        end if;
    end process;

    dH_3_0_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                dH_3_0_reg_470 <= grp_TrotterUnit_fu_500_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_on_subcall_done))) then 
                dH_3_0_reg_470 <= dH_3_reg_2165;
            end if; 
        end if;
    end process;

    packOfst_1_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                packOfst_1_reg_480 <= packOfst_reg_2192;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_on_subcall_done))) then 
                packOfst_1_reg_480 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    stage_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                stage_fu_192 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_1))) then 
                stage_fu_192 <= add_ln205_reg_1731;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln205_fu_597_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                Ofst_reg_1736 <= Ofst_fu_609_p1;
                trunc_ln225_6_reg_1758 <= add_ln225_fu_677_p2(63 downto 6);
                trunc_ln226_4_reg_1763 <= add_ln226_fu_692_p2(63 downto 6);
                trunc_ln2_reg_1748 <= add_ln819_fu_635_p2(63 downto 6);
                trunc_ln819_1_reg_1753 <= add_ln819_1_fu_650_p2(63 downto 6);
                trunc_ln_reg_1743 <= stage_fu_192(11 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln205_reg_1731 <= add_ln205_fu_603_p2;
                stage_1_reg_1722 <= stage_fu_192;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                add_ln214_reg_2125 <= add_ln214_fu_1555_p2;
                bitcast_ln226_1_reg_2145 <= bitcast_ln226_1_fu_1570_p1;
                bitcast_ln226_2_reg_2155 <= bitcast_ln226_2_fu_1576_p1;
                bitcast_ln226_3_reg_2170 <= bitcast_ln226_3_fu_1589_p1;
                bitcast_ln226_reg_2135 <= bitcast_ln226_fu_1564_p1;
                dH_0_reg_2130 <= dH_0_fu_1561_p1;
                dH_1_reg_2140 <= dH_1_fu_1567_p1;
                dH_2_reg_2150 <= dH_2_fu_1573_p1;
                dH_3_reg_2165 <= dH_3_fu_1586_p1;
                p_Result_8_reg_2160 <= p_Result_8_fu_1579_p3;
                tmp_reg_2175 <= stage_fu_192(12 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                add_ln225_7_reg_2065 <= add_ln225_7_fu_1453_p2;
                add_ln226_7_reg_2075 <= add_ln226_7_fu_1458_p2;
                gmem2_addr_3_read_reg_2060 <= gmem2_RDATA;
                gmem3_addr_3_read_reg_2070 <= gmem3_RDATA;
                p_Result_4_reg_2045 <= p_Result_4_fu_1380_p3;
                trunc_ln225_12_reg_2050 <= trunc_ln225_12_fu_1416_p1;
                trunc_ln226_3_reg_2055 <= trunc_ln226_3_fu_1442_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                dHTunnel_reg_1677 <= grp_fu_558_p2;
                empty_1650_reg_1690 <= empty_1650_fu_574_p2;
                empty_1651_reg_1698 <= empty_1651_fu_580_p2;
                empty_reg_1682 <= empty_fu_568_p2;
                trunc_ln225_reg_1706 <= trunc_ln225_fu_586_p1;
                trunc_ln226_reg_1714 <= trunc_ln226_fu_590_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                dH_0_1_reg_2197 <= grp_TrotterUnit_fu_500_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                dH_1_1_reg_2202 <= grp_TrotterUnit_fu_500_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                dH_2_1_reg_2207 <= grp_TrotterUnit_fu_500_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                gmem2_addr_1_read_reg_2000 <= gmem2_RDATA;
                gmem3_addr_1_read_reg_2005 <= gmem3_RDATA;
                p_Result_2_reg_1985 <= p_Result_2_fu_1234_p3;
                trunc_ln225_2_reg_1990 <= trunc_ln225_2_fu_1274_p1;
                trunc_ln226_1_reg_1995 <= trunc_ln226_1_fu_1300_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                gmem2_addr_2_read_reg_2035 <= gmem2_RDATA;
                gmem3_addr_2_read_reg_2040 <= gmem3_RDATA;
                p_Result_3_reg_2020 <= p_Result_3_fu_1313_p3;
                spinOfst_reg_2010 <= spinOfst_fu_1304_p2;
                trunc_ln225_5_reg_2025 <= trunc_ln225_5_fu_1350_p1;
                trunc_ln226_2_reg_2030 <= trunc_ln226_2_fu_1376_p1;
                    zext_ln216_1_reg_2015(8 downto 0) <= zext_ln216_1_fu_1309_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                gmem2_addr_read_reg_1975 <= gmem2_RDATA;
                gmem3_addr_read_reg_1980 <= gmem3_RDATA;
                p_Result_s_reg_1970 <= p_Result_s_fu_1226_p3;
                spinOfst_4_reg_1957 <= spinOfst_4_fu_1219_p1;
                    zext_ln216_reg_1965(8 downto 0) <= zext_ln216_fu_1222_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                p_Result_5_reg_2090 <= p_Result_5_fu_1472_p3;
                spinOfst_2_reg_2080 <= spinOfst_2_fu_1463_p2;
                trunc_ln225_14_reg_2095 <= trunc_ln225_14_fu_1496_p1;
                trunc_ln226_5_reg_2100 <= trunc_ln226_5_fu_1516_p1;
                    zext_ln216_2_reg_2085(8 downto 0) <= zext_ln216_2_fu_1468_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                p_Result_6_reg_2105 <= p_Result_6_fu_1520_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                p_Result_7_reg_2120 <= p_Result_7_fu_1536_p3;
                spinOfst_3_reg_2110 <= spinOfst_3_fu_1527_p2;
                    zext_ln216_3_reg_2115(8 downto 0) <= zext_ln216_3_fu_1532_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                packOfst_reg_2192 <= packOfst_fu_1621_p2;
                trunc_ln251_reg_2184 <= trunc_ln251_fu_1610_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln215_1_reg_1786 <= Ofst_1_fu_737_p2(11 downto 9);
                trunc_ln225_3_reg_1792 <= trunc_ln225_3_fu_764_p1;
                trunc_ln225_8_reg_1797 <= add_ln225_1_fu_768_p2(63 downto 6);
                trunc_ln4_reg_1802 <= add_ln226_2_fu_797_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln215_2_reg_1835 <= Ofst_2_fu_883_p2(11 downto 9);
                trunc_ln215_3_reg_1856 <= Ofst_3_fu_958_p2(11 downto 9);
                trunc_ln225_11_reg_1867 <= add_ln225_3_fu_989_p2(63 downto 6);
                trunc_ln225_13_reg_1862 <= trunc_ln225_13_fu_985_p1;
                trunc_ln225_7_reg_1841 <= trunc_ln225_7_fu_910_p1;
                trunc_ln225_s_reg_1846 <= add_ln225_2_fu_914_p2(63 downto 6);
                trunc_ln226_6_reg_1851 <= add_ln226_4_fu_943_p2(63 downto 6);
                trunc_ln226_8_reg_1872 <= add_ln226_6_fu_1022_p2(63 downto 6);
                trunc_ln819_2_reg_1813 <= add_ln819_2_fu_833_p2(63 downto 6);
                trunc_ln819_3_reg_1818 <= add_ln819_3_fu_848_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_1592_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                trunc_ln5_reg_2179 <= add_ln214_fu_1555_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln819_4_reg_1901 <= add_ln819_4_fu_1088_p2(63 downto 6);
                trunc_ln819_5_reg_1906 <= add_ln819_5_fu_1103_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln819_6_reg_1935 <= add_ln819_6_fu_1169_p2(63 downto 6);
                trunc_ln819_7_reg_1940 <= add_ln819_7_fu_1184_p2(63 downto 6);
            end if;
        end if;
    end process;
    zext_ln216_reg_1965(31 downto 9) <= "00000000000000000000000";
    zext_ln216_1_reg_2015(31 downto 9) <= "00000000000000000000000";
    zext_ln216_2_reg_2085(31 downto 9) <= "00000000000000000000000";
    zext_ln216_3_reg_2115(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state77, ap_CS_fsm_state8, ap_CS_fsm_state78, ap_CS_fsm_state9, ap_CS_fsm_state79, ap_CS_fsm_state10, ap_CS_fsm_state80, ap_CS_fsm_state11, ap_CS_fsm_state81, ap_CS_fsm_state12, ap_CS_fsm_state82, ap_CS_fsm_state13, ap_CS_fsm_state83, ap_CS_fsm_state14, ap_CS_fsm_state84, ap_CS_fsm_state6, icmp_ln205_fu_597_p2, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_ap_done, grp_TrotterUnitFinal_fu_525_ap_done, gmem0_ARREADY, gmem0_RVALID, gmem2_RVALID, gmem3_RVALID, ap_CS_fsm_state85, ap_block_state85_on_subcall_done, icmp_ln251_fu_1615_p2, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io, ap_block_state95_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln205_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (gmem0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (gmem0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if ((not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                if ((not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if ((not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if ((not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (gmem0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (gmem0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state83) and (gmem0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (gmem0_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_const_boolean_0 = ap_block_state85_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state87 => 
                if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (ap_const_boolean_0 = ap_block_state95_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((grp_TrotterUnitFinal_fu_525_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((grp_TrotterUnitFinal_fu_525_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((grp_TrotterUnitFinal_fu_525_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    JcoupLocal_0_address0_assign_proc : process(tmp_reg_2175, ap_CS_fsm_state87, grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_address0, grp_TrotterUnit_fu_500_JcoupLocal_address0, grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_address0, ap_CS_fsm_state85, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_0_address0 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            JcoupLocal_0_address0 <= grp_TrotterUnit_fu_500_JcoupLocal_address0;
        elsif (((tmp_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            JcoupLocal_0_address0 <= grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_address0;
        else 
            JcoupLocal_0_address0 <= "XXX";
        end if; 
    end process;


    JcoupLocal_0_ce0_assign_proc : process(tmp_reg_2175, ap_CS_fsm_state87, grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce0, grp_TrotterUnit_fu_500_JcoupLocal_ce0, grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_ce0, ap_CS_fsm_state85, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_0_ce0 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            JcoupLocal_0_ce0 <= grp_TrotterUnit_fu_500_JcoupLocal_ce0;
        elsif (((tmp_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            JcoupLocal_0_ce0 <= grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce0;
        else 
            JcoupLocal_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_0_ce1_assign_proc : process(tmp_reg_2175, grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce1, ap_CS_fsm_state85)
    begin
        if (((tmp_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            JcoupLocal_0_ce1 <= grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_ce1;
        else 
            JcoupLocal_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_0_we1_assign_proc : process(tmp_reg_2175, grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_we1, ap_CS_fsm_state85)
    begin
        if (((tmp_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            JcoupLocal_0_we1 <= grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_JcoupLocal_0_we1;
        else 
            JcoupLocal_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_1_address0_assign_proc : process(ap_CS_fsm_state89, grp_TrotterUnit_fu_500_JcoupLocal_address0, grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_address0, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_1_address0 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            JcoupLocal_1_address0 <= grp_TrotterUnit_fu_500_JcoupLocal_address0;
        else 
            JcoupLocal_1_address0 <= "XXX";
        end if; 
    end process;


    JcoupLocal_1_ce0_assign_proc : process(ap_CS_fsm_state89, grp_TrotterUnit_fu_500_JcoupLocal_ce0, grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce0, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_1_ce0 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            JcoupLocal_1_ce0 <= grp_TrotterUnit_fu_500_JcoupLocal_ce0;
        else 
            JcoupLocal_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_1_ce1_assign_proc : process(grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce1, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_1_ce1 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_ce1;
        else 
            JcoupLocal_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_1_we1_assign_proc : process(grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_we1, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_1_we1 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_1_we1;
        else 
            JcoupLocal_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_2_address0_assign_proc : process(ap_CS_fsm_state91, grp_TrotterUnit_fu_500_JcoupLocal_address0, grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_address0, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_2_address0 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            JcoupLocal_2_address0 <= grp_TrotterUnit_fu_500_JcoupLocal_address0;
        else 
            JcoupLocal_2_address0 <= "XXX";
        end if; 
    end process;


    JcoupLocal_2_ce0_assign_proc : process(ap_CS_fsm_state91, grp_TrotterUnit_fu_500_JcoupLocal_ce0, grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce0, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_2_ce0 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            JcoupLocal_2_ce0 <= grp_TrotterUnit_fu_500_JcoupLocal_ce0;
        else 
            JcoupLocal_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_2_ce1_assign_proc : process(grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce1, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_2_ce1 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_ce1;
        else 
            JcoupLocal_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_2_we1_assign_proc : process(grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_we1, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_2_we1 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_2_we1;
        else 
            JcoupLocal_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_3_ce0_assign_proc : process(ap_CS_fsm_state93, grp_TrotterUnit_fu_500_JcoupLocal_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            JcoupLocal_3_ce0 <= grp_TrotterUnit_fu_500_JcoupLocal_ce0;
        else 
            JcoupLocal_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_3_ce1_assign_proc : process(grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_ce1, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_3_ce1 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_ce1;
        else 
            JcoupLocal_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    JcoupLocal_3_we1_assign_proc : process(grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_we1, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            JcoupLocal_3_we1 <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_JcoupLocal_3_we1;
        else 
            JcoupLocal_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Ofst_1_fu_737_p2 <= std_logic_vector(unsigned(Ofst_reg_1736) + unsigned(ap_const_lv12_FFF));
    Ofst_2_fu_883_p2 <= std_logic_vector(unsigned(Ofst_reg_1736) + unsigned(ap_const_lv12_FFE));
    Ofst_3_fu_958_p2 <= std_logic_vector(unsigned(Ofst_reg_1736) + unsigned(ap_const_lv12_FFD));
    Ofst_fu_609_p1 <= stage_fu_192(12 - 1 downto 0);
    add_ln205_fu_603_p2 <= std_logic_vector(unsigned(stage_fu_192) + unsigned(ap_const_lv13_1));
    add_ln214_fu_1555_p2 <= std_logic_vector(unsigned(zext_ln214_fu_1551_p1) + unsigned(Jcoup));
    add_ln225_1_fu_768_p2 <= std_logic_vector(unsigned(zext_ln225_2_fu_760_p1) + unsigned(h));
    add_ln225_2_fu_914_p2 <= std_logic_vector(unsigned(zext_ln225_4_fu_906_p1) + unsigned(h));
    add_ln225_3_fu_989_p2 <= std_logic_vector(unsigned(zext_ln225_6_fu_981_p1) + unsigned(h));
    add_ln225_4_fu_1252_p2 <= std_logic_vector(unsigned(trunc_ln225_4_fu_1244_p3) + unsigned(trunc_ln225_reg_1706));
    add_ln225_5_fu_1328_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_1321_p3) + unsigned(trunc_ln225_reg_1706));
    add_ln225_6_fu_1394_p2 <= std_logic_vector(unsigned(trunc_ln225_9_fu_1387_p3) + unsigned(trunc_ln225_reg_1706));
    add_ln225_7_fu_1453_p2 <= std_logic_vector(unsigned(trunc_ln225_10_fu_1446_p3) + unsigned(trunc_ln225_reg_1706));
    add_ln225_fu_677_p2 <= std_logic_vector(unsigned(zext_ln225_fu_673_p1) + unsigned(h));
    add_ln226_1_fu_1278_p2 <= std_logic_vector(unsigned(trunc_ln225_4_fu_1244_p3) + unsigned(trunc_ln226_reg_1714));
    add_ln226_2_fu_797_p2 <= std_logic_vector(unsigned(zext_ln226_1_fu_793_p1) + unsigned(logRand));
    add_ln226_3_fu_1354_p2 <= std_logic_vector(unsigned(trunc_ln226_reg_1714) + unsigned(trunc_ln3_fu_1321_p3));
    add_ln226_4_fu_943_p2 <= std_logic_vector(unsigned(zext_ln226_3_fu_939_p1) + unsigned(logRand));
    add_ln226_5_fu_1420_p2 <= std_logic_vector(unsigned(trunc_ln226_reg_1714) + unsigned(trunc_ln225_9_fu_1387_p3));
    add_ln226_6_fu_1022_p2 <= std_logic_vector(unsigned(zext_ln226_5_fu_1018_p1) + unsigned(logRand));
    add_ln226_7_fu_1458_p2 <= std_logic_vector(unsigned(trunc_ln226_reg_1714) + unsigned(trunc_ln225_10_fu_1446_p3));
    add_ln226_fu_692_p2 <= std_logic_vector(unsigned(zext_ln225_fu_673_p1) + unsigned(logRand));
    add_ln819_1_fu_650_p2 <= std_logic_vector(unsigned(zext_ln819_fu_631_p1) + unsigned(empty_reg_1682));
    add_ln819_2_fu_833_p2 <= std_logic_vector(unsigned(zext_ln819_1_fu_829_p1) + unsigned(trotters));
    add_ln819_3_fu_848_p2 <= std_logic_vector(unsigned(zext_ln819_1_fu_829_p1) + unsigned(empty_1650_reg_1690));
    add_ln819_4_fu_1088_p2 <= std_logic_vector(unsigned(zext_ln819_2_fu_1084_p1) + unsigned(empty_reg_1682));
    add_ln819_5_fu_1103_p2 <= std_logic_vector(unsigned(zext_ln819_2_fu_1084_p1) + unsigned(empty_1651_reg_1698));
    add_ln819_6_fu_1169_p2 <= std_logic_vector(unsigned(zext_ln819_3_fu_1165_p1) + unsigned(empty_1650_reg_1690));
    add_ln819_7_fu_1184_p2 <= std_logic_vector(unsigned(zext_ln819_3_fu_1165_p1) + unsigned(trotters));
    add_ln819_fu_635_p2 <= std_logic_vector(unsigned(zext_ln819_fu_631_p1) + unsigned(empty_1651_reg_1698));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;

    ap_ST_fsm_state101_blk_assign_proc : process(grp_TrotterUnitFinal_fu_525_ap_done)
    begin
        if ((grp_TrotterUnitFinal_fu_525_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state101_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state101_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_io)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(gmem0_ARREADY)
    begin
        if ((gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;

    ap_ST_fsm_state77_blk_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
        if (((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state77_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state77_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state78_blk_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
        if (((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state78_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state78_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state79_blk_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
        if (((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state79_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state79_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_block_state7_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state7_io)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state80_blk_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
        if (((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state80_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state80_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state81_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state81_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state81_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state82_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state83_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state83_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state83_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state84_blk_assign_proc : process(gmem0_RVALID)
    begin
        if ((gmem0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state84_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state84_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state85_blk_assign_proc : process(ap_block_state85_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state85_on_subcall_done)) then 
            ap_ST_fsm_state85_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state85_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state86_blk <= ap_const_logic_0;

    ap_ST_fsm_state87_blk_assign_proc : process(grp_TrotterUnit_fu_500_ap_done)
    begin
        if ((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state88_blk <= ap_const_logic_0;

    ap_ST_fsm_state89_blk_assign_proc : process(grp_TrotterUnit_fu_500_ap_done)
    begin
        if ((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state89_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state89_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_block_state8_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state8_io)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state90_blk <= ap_const_logic_0;

    ap_ST_fsm_state91_blk_assign_proc : process(grp_TrotterUnit_fu_500_ap_done)
    begin
        if ((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state91_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state91_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state92_blk <= ap_const_logic_0;

    ap_ST_fsm_state93_blk_assign_proc : process(grp_TrotterUnit_fu_500_ap_done)
    begin
        if ((grp_TrotterUnit_fu_500_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state93_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state93_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state94_blk <= ap_const_logic_0;

    ap_ST_fsm_state95_blk_assign_proc : process(ap_block_state95_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state95_on_subcall_done)) then 
            ap_ST_fsm_state95_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state95_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state96_blk <= ap_const_logic_0;

    ap_ST_fsm_state97_blk_assign_proc : process(grp_TrotterUnitFinal_fu_525_ap_done)
    begin
        if ((grp_TrotterUnitFinal_fu_525_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state97_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state97_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state98_blk <= ap_const_logic_0;

    ap_ST_fsm_state99_blk_assign_proc : process(grp_TrotterUnitFinal_fu_525_ap_done)
    begin
        if ((grp_TrotterUnitFinal_fu_525_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state99_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state99_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_block_state9_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state9_io)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state10_io_assign_proc : process(gmem0_ARREADY, gmem2_ARREADY, gmem3_ARREADY)
    begin
                ap_block_state10_io <= ((gmem3_ARREADY = ap_const_logic_0) or (gmem2_ARREADY = ap_const_logic_0) or (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state77_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
                ap_block_state77 <= ((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state78_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
                ap_block_state78 <= ((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state79_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
                ap_block_state79 <= ((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(gmem0_ARREADY, gmem2_ARREADY, gmem3_ARREADY)
    begin
                ap_block_state7_io <= ((gmem3_ARREADY = ap_const_logic_0) or (gmem2_ARREADY = ap_const_logic_0) or (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state80_assign_proc : process(gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
                ap_block_state80 <= ((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state85_on_subcall_done_assign_proc : process(tmp_reg_2175, grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_done)
    begin
                ap_block_state85_on_subcall_done <= ((grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_done = ap_const_logic_0) and (tmp_reg_2175 = ap_const_lv1_0));
    end process;


    ap_block_state8_io_assign_proc : process(gmem0_ARREADY, gmem2_ARREADY, gmem3_ARREADY)
    begin
                ap_block_state8_io <= ((gmem3_ARREADY = ap_const_logic_0) or (gmem2_ARREADY = ap_const_logic_0) or (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state95_on_subcall_done_assign_proc : process(grp_TrotterUnitFinal_fu_525_ap_done, grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_done)
    begin
                ap_block_state95_on_subcall_done <= ((grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_done = ap_const_logic_0) or (grp_TrotterUnitFinal_fu_525_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_io_assign_proc : process(gmem0_ARREADY, gmem2_ARREADY, gmem3_ARREADY)
    begin
                ap_block_state9_io <= ((gmem3_ARREADY = ap_const_logic_0) or (gmem2_ARREADY = ap_const_logic_0) or (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6, icmp_ln205_fu_597_p2)
    begin
        if (((icmp_ln205_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln205_fu_597_p2)
    begin
        if (((icmp_ln205_fu_597_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln226_1_fu_1570_p1 <= trunc_ln226_2_reg_2030;
    bitcast_ln226_2_fu_1576_p1 <= trunc_ln226_3_reg_2055;
    bitcast_ln226_3_fu_1589_p1 <= trunc_ln226_5_reg_2100;
    bitcast_ln226_fu_1564_p1 <= trunc_ln226_1_reg_1995;
    dH_0_fu_1561_p1 <= trunc_ln225_2_reg_1990;
    dH_1_fu_1567_p1 <= trunc_ln225_5_reg_2025;
    dH_2_fu_1573_p1 <= trunc_ln225_12_reg_2050;
    dH_3_fu_1586_p1 <= trunc_ln225_14_reg_2095;
    empty_1650_fu_574_p2 <= std_logic_vector(unsigned(trotters) + unsigned(ap_const_lv64_400));
    empty_1651_fu_580_p2 <= std_logic_vector(unsigned(trotters) + unsigned(ap_const_lv64_600));
    empty_fu_568_p2 <= std_logic_vector(unsigned(trotters) + unsigned(ap_const_lv64_200));

    gmem0_ARADDR_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARADDR, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARADDR, gmem0_ARREADY, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101, sext_ln819_fu_707_p1, sext_ln819_1_fu_812_p1, sext_ln819_2_fu_1037_p1, sext_ln819_3_fu_1067_p1, sext_ln819_4_fu_1138_p1, sext_ln819_5_fu_1148_p1, sext_ln819_6_fu_1199_p1, sext_ln819_7_fu_1209_p1, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem0_ARREADY = ap_const_logic_1))) then 
            gmem0_ARADDR <= sext_ln819_7_fu_1209_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (gmem0_ARREADY = ap_const_logic_1))) then 
            gmem0_ARADDR <= sext_ln819_6_fu_1199_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem0_ARREADY = ap_const_logic_1))) then 
            gmem0_ARADDR <= sext_ln819_5_fu_1148_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (gmem0_ARREADY = ap_const_logic_1))) then 
            gmem0_ARADDR <= sext_ln819_4_fu_1138_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io))) then 
            gmem0_ARADDR <= sext_ln819_3_fu_1067_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then 
            gmem0_ARADDR <= sext_ln819_2_fu_1037_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io))) then 
            gmem0_ARADDR <= sext_ln819_1_fu_812_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then 
            gmem0_ARADDR <= sext_ln819_fu_707_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARADDR <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARADDR <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARADDR;
        else 
            gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARBURST_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARBURST, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARBURST, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARBURST <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARBURST <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARBURST;
        else 
            gmem0_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem0_ARCACHE_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARCACHE, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARCACHE, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARCACHE <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARCACHE <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARCACHE;
        else 
            gmem0_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem0_ARID_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARID, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARID, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARID <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARID <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARID;
        else 
            gmem0_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem0_ARLEN_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARLEN, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLEN, gmem0_ARREADY, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io)))) then 
            gmem0_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARLEN <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARLEN <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARLEN;
        else 
            gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARLOCK_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARLOCK, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLOCK, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARLOCK <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARLOCK <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARLOCK;
        else 
            gmem0_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem0_ARPROT_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARPROT, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARPROT, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARPROT <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARPROT <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARPROT;
        else 
            gmem0_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem0_ARQOS_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARQOS, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARQOS, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARQOS <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARQOS <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARQOS;
        else 
            gmem0_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem0_ARREGION_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARREGION, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARREGION, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARREGION <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARREGION <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARREGION;
        else 
            gmem0_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem0_ARSIZE_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARSIZE, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARSIZE, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARSIZE <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARSIZE <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARSIZE;
        else 
            gmem0_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem0_ARUSER_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARUSER, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARUSER, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARUSER <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARUSER <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARUSER;
        else 
            gmem0_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_ARVALID, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARVALID, gmem0_ARREADY, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (gmem0_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io)))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_ARVALID <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_ARVALID <= grp_TrotterUnit_fu_500_m_axi_gmem0_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_AWVALID_assign_proc : process(grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWVALID, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_AWVALID <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_AWVALID;
        else 
            gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_BREADY_assign_proc : process(grp_TrotterUnitFinal_fu_525_m_axi_gmem0_BREADY, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_BREADY <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_BREADY;
        else 
            gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, grp_TrotterUnit_fu_500_m_axi_gmem0_RREADY, grp_TrotterUnitFinal_fu_525_m_axi_gmem0_RREADY, gmem0_RVALID, gmem2_RVALID, gmem3_RVALID, icmp_ln251_fu_1615_p2, ap_CS_fsm_state88, ap_CS_fsm_state90, ap_CS_fsm_state92, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state84) and (gmem0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (gmem0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state82) and (gmem0_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state81) and (gmem0_RVALID = ap_const_logic_1)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state79)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state77)))) then 
            gmem0_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_RREADY <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (icmp_ln251_fu_1615_p2 = ap_const_lv1_0)))) then 
            gmem0_RREADY <= grp_TrotterUnit_fu_500_m_axi_gmem0_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_WVALID_assign_proc : process(grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WVALID, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state100, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem0_WVALID <= grp_TrotterUnitFinal_fu_525_m_axi_gmem0_WVALID;
        else 
            gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_ARVALID_assign_proc : process(ap_CS_fsm_state84, tmp_fu_1592_p3, tmp_reg_2175, grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARVALID, ap_CS_fsm_state85)
    begin
        if ((((tmp_fu_1592_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((tmp_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            gmem1_ARVALID <= grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_ARVALID;
        else 
            gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_RREADY_assign_proc : process(ap_CS_fsm_state84, tmp_fu_1592_p3, tmp_reg_2175, grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_RREADY, ap_CS_fsm_state85)
    begin
        if ((((tmp_fu_1592_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((tmp_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85)))) then 
            gmem1_RREADY <= grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_m_axi_gmem1_RREADY;
        else 
            gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_ARADDR_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln225_fu_717_p1, sext_ln225_1_fu_863_p1, sext_ln225_2_fu_1047_p1, sext_ln225_3_fu_1118_p1, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io))) then 
            gmem2_ARADDR <= sext_ln225_3_fu_1118_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then 
            gmem2_ARADDR <= sext_ln225_2_fu_1047_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io))) then 
            gmem2_ARADDR <= sext_ln225_1_fu_863_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then 
            gmem2_ARADDR <= sext_ln225_fu_717_p1;
        else 
            gmem2_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io)))) then 
            gmem2_ARVALID <= ap_const_logic_1;
        else 
            gmem2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_RREADY_assign_proc : process(ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
        if (((not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state79)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state77)))) then 
            gmem2_RREADY <= ap_const_logic_1;
        else 
            gmem2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AR_assign_proc : process(m_axi_gmem2_ARREADY, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem2_blk_n_AR <= m_axi_gmem2_ARREADY;
        else 
            gmem2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_R_assign_proc : process(m_axi_gmem2_RVALID, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            gmem2_blk_n_R <= m_axi_gmem2_RVALID;
        else 
            gmem2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_ARADDR_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln226_fu_727_p1, sext_ln226_1_fu_873_p1, sext_ln226_2_fu_1057_p1, sext_ln226_3_fu_1128_p1, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io))) then 
            gmem3_ARADDR <= sext_ln226_3_fu_1128_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then 
            gmem3_ARADDR <= sext_ln226_2_fu_1057_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io))) then 
            gmem3_ARADDR <= sext_ln226_1_fu_873_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io))) then 
            gmem3_ARADDR <= sext_ln226_fu_727_p1;
        else 
            gmem3_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state7_io, ap_block_state8_io, ap_block_state9_io, ap_block_state10_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_io)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_io)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_io)))) then 
            gmem3_ARVALID <= ap_const_logic_1;
        else 
            gmem3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_RREADY_assign_proc : process(ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, gmem0_RVALID, gmem2_RVALID, gmem3_RVALID)
    begin
        if (((not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state80)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state79)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78)) or (not(((gmem3_RVALID = ap_const_logic_0) or (gmem2_RVALID = ap_const_logic_0) or (gmem0_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state77)))) then 
            gmem3_RREADY <= ap_const_logic_1;
        else 
            gmem3_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_blk_n_AR_assign_proc : process(m_axi_gmem3_ARREADY, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            gmem3_blk_n_AR <= m_axi_gmem3_ARREADY;
        else 
            gmem3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_R_assign_proc : process(m_axi_gmem3_RVALID, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            gmem3_blk_n_R <= m_axi_gmem3_RVALID;
        else 
            gmem3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start <= grp_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP_VITIS_LOOP_234_1_fu_491_ap_start_reg;
    grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start <= grp_QuantumMonteCarloU50_Pipeline_SHIFT_JCOUP_fu_550_ap_start_reg;
    grp_TrotterUnitFinal_fu_525_ap_start <= grp_TrotterUnitFinal_fu_525_ap_start_reg;

    grp_TrotterUnitFinal_fu_525_dH_assign_proc : process(dH_1_0_reg_440, dH_0_0_reg_450, dH_2_0_reg_460, dH_3_0_reg_470, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_dH <= dH_3_0_reg_470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_dH <= dH_2_0_reg_460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_dH <= dH_1_0_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_dH <= dH_0_0_reg_450;
        else 
            grp_TrotterUnitFinal_fu_525_dH <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_TrotterUnitFinal_fu_525_downSpin_assign_proc : process(p_Result_2_reg_1985, p_Result_4_reg_2045, p_Result_6_reg_2105, p_Result_8_reg_2160, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_downSpin <= p_Result_8_reg_2160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_downSpin <= p_Result_6_reg_2105;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_downSpin <= p_Result_4_reg_2045;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_downSpin <= p_Result_2_reg_1985;
        else 
            grp_TrotterUnitFinal_fu_525_downSpin <= "X";
        end if; 
    end process;


    grp_TrotterUnitFinal_fu_525_iPack_assign_proc : process(trunc_ln_reg_1743, trunc_ln215_1_reg_1786, trunc_ln215_2_reg_1835, trunc_ln215_3_reg_1856, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_iPack <= trunc_ln215_3_reg_1856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_iPack <= trunc_ln215_2_reg_1835;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_iPack <= trunc_ln215_1_reg_1786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_iPack <= trunc_ln_reg_1743;
        else 
            grp_TrotterUnitFinal_fu_525_iPack <= "XXX";
        end if; 
    end process;


    grp_TrotterUnitFinal_fu_525_iSpin_assign_proc : process(spinOfst_4_reg_1957, spinOfst_reg_2010, spinOfst_2_reg_2080, spinOfst_3_reg_2110, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_iSpin <= spinOfst_3_reg_2110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_iSpin <= spinOfst_2_reg_2080;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_iSpin <= spinOfst_reg_2010;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_iSpin <= spinOfst_4_reg_1957;
        else 
            grp_TrotterUnitFinal_fu_525_iSpin <= "XXXXXXXXX";
        end if; 
    end process;


    grp_TrotterUnitFinal_fu_525_logRandNumber_assign_proc : process(bitcast_ln226_reg_2135, bitcast_ln226_1_reg_2145, bitcast_ln226_2_reg_2155, bitcast_ln226_3_reg_2170, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_logRandNumber <= bitcast_ln226_3_reg_2170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_logRandNumber <= bitcast_ln226_2_reg_2155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_logRandNumber <= bitcast_ln226_1_reg_2145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_logRandNumber <= bitcast_ln226_reg_2135;
        else 
            grp_TrotterUnitFinal_fu_525_logRandNumber <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_TrotterUnitFinal_fu_525_t_assign_proc : process(ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_t <= ap_const_lv2_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_t <= ap_const_lv2_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_t <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_t <= ap_const_lv2_0;
        else 
            grp_TrotterUnitFinal_fu_525_t <= "XX";
        end if; 
    end process;


    grp_TrotterUnitFinal_fu_525_trotters_assign_proc : process(trotters, empty_reg_1682, empty_1650_reg_1690, empty_1651_reg_1698, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_trotters <= empty_1651_reg_1698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_trotters <= empty_1650_reg_1690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_trotters <= empty_reg_1682;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_trotters <= trotters;
        else 
            grp_TrotterUnitFinal_fu_525_trotters <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_TrotterUnitFinal_fu_525_upSpin_assign_proc : process(p_Result_s_reg_1970, p_Result_3_reg_2020, p_Result_5_reg_2090, p_Result_7_reg_2120, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_TrotterUnitFinal_fu_525_upSpin <= p_Result_7_reg_2120;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_TrotterUnitFinal_fu_525_upSpin <= p_Result_5_reg_2090;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_TrotterUnitFinal_fu_525_upSpin <= p_Result_3_reg_2020;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_TrotterUnitFinal_fu_525_upSpin <= p_Result_s_reg_1970;
        else 
            grp_TrotterUnitFinal_fu_525_upSpin <= "X";
        end if; 
    end process;


    grp_TrotterUnit_fu_500_JcoupLocal_q0_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, JcoupLocal_0_q0, JcoupLocal_1_q0, JcoupLocal_2_q0, JcoupLocal_3_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_TrotterUnit_fu_500_JcoupLocal_q0 <= JcoupLocal_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_TrotterUnit_fu_500_JcoupLocal_q0 <= JcoupLocal_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_TrotterUnit_fu_500_JcoupLocal_q0 <= JcoupLocal_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_TrotterUnit_fu_500_JcoupLocal_q0 <= JcoupLocal_0_q0;
        else 
            grp_TrotterUnit_fu_500_JcoupLocal_q0 <= "";
        end if; 
    end process;

    grp_TrotterUnit_fu_500_ap_start <= grp_TrotterUnit_fu_500_ap_start_reg;

    grp_TrotterUnit_fu_500_dH_read_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, dH_1_0_reg_440, dH_0_0_reg_450, dH_2_0_reg_460, dH_3_0_reg_470)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_TrotterUnit_fu_500_dH_read <= dH_3_0_reg_470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_TrotterUnit_fu_500_dH_read <= dH_2_0_reg_460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_TrotterUnit_fu_500_dH_read <= dH_1_0_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_TrotterUnit_fu_500_dH_read <= dH_0_0_reg_450;
        else 
            grp_TrotterUnit_fu_500_dH_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_TrotterUnit_fu_500_p_read_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, dH_1_0_reg_440, dH_0_0_reg_450, dH_2_0_reg_460, dH_3_0_reg_470)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_TrotterUnit_fu_500_p_read <= dH_3_0_reg_470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_TrotterUnit_fu_500_p_read <= dH_2_0_reg_460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_TrotterUnit_fu_500_p_read <= dH_1_0_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_TrotterUnit_fu_500_p_read <= dH_0_0_reg_450;
        else 
            grp_TrotterUnit_fu_500_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_TrotterUnit_fu_500_t_offset_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_TrotterUnit_fu_500_t_offset <= ap_const_lv2_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_TrotterUnit_fu_500_t_offset <= ap_const_lv2_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_TrotterUnit_fu_500_t_offset <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_TrotterUnit_fu_500_t_offset <= ap_const_lv2_0;
        else 
            grp_TrotterUnit_fu_500_t_offset <= "XX";
        end if; 
    end process;


    grp_TrotterUnit_fu_500_trotters_assign_proc : process(trotters, empty_reg_1682, empty_1650_reg_1690, empty_1651_reg_1698, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_TrotterUnit_fu_500_trotters <= empty_1651_reg_1698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_TrotterUnit_fu_500_trotters <= empty_1650_reg_1690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_TrotterUnit_fu_500_trotters <= empty_reg_1682;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_TrotterUnit_fu_500_trotters <= trotters;
        else 
            grp_TrotterUnit_fu_500_trotters <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln205_fu_597_p2 <= "1" when (stage_fu_192 = ap_const_lv13_1003) else "0";
    icmp_ln251_fu_1615_p2 <= "1" when (packOfst_1_reg_480 = ap_const_lv4_8) else "0";
    lshr_ln225_1_fu_1345_p2 <= std_logic_vector(shift_right(unsigned(gmem2_addr_1_read_reg_2000),to_integer(unsigned('0' & zext_ln225_3_fu_1341_p1(31-1 downto 0)))));
    lshr_ln225_2_fu_1411_p2 <= std_logic_vector(shift_right(unsigned(gmem2_addr_2_read_reg_2035),to_integer(unsigned('0' & zext_ln225_5_fu_1407_p1(31-1 downto 0)))));
    lshr_ln225_3_fu_1491_p2 <= std_logic_vector(shift_right(unsigned(gmem2_addr_3_read_reg_2060),to_integer(unsigned('0' & zext_ln225_7_fu_1487_p1(31-1 downto 0)))));
    lshr_ln225_fu_1269_p2 <= std_logic_vector(shift_right(unsigned(gmem2_addr_read_reg_1975),to_integer(unsigned('0' & zext_ln225_1_fu_1265_p1(31-1 downto 0)))));
    lshr_ln226_1_fu_1371_p2 <= std_logic_vector(shift_right(unsigned(gmem3_addr_1_read_reg_2005),to_integer(unsigned('0' & zext_ln226_2_fu_1367_p1(31-1 downto 0)))));
    lshr_ln226_2_fu_1437_p2 <= std_logic_vector(shift_right(unsigned(gmem3_addr_2_read_reg_2040),to_integer(unsigned('0' & zext_ln226_4_fu_1433_p1(31-1 downto 0)))));
    lshr_ln226_3_fu_1511_p2 <= std_logic_vector(shift_right(unsigned(gmem3_addr_3_read_reg_2070),to_integer(unsigned('0' & zext_ln226_6_fu_1507_p1(31-1 downto 0)))));
    lshr_ln226_fu_1295_p2 <= std_logic_vector(shift_right(unsigned(gmem3_addr_read_reg_1980),to_integer(unsigned('0' & zext_ln226_fu_1291_p1(31-1 downto 0)))));
    or_ln226_1_fu_929_p4 <= ((ap_const_lv2_2 & Ofst_2_fu_883_p2) & ap_const_lv2_0);
    or_ln226_2_fu_1004_p4 <= ((ap_const_lv1_1 & Ofst_3_fu_958_p2) & ap_const_lv2_0);
    or_ln_fu_783_p4 <= ((ap_const_lv1_1 & Ofst_1_fu_737_p2) & ap_const_lv2_0);
    p_Result_2_fu_1234_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_reg_1965)) downto to_integer(unsigned(zext_ln216_reg_1965))) when (to_integer(unsigned(zext_ln216_reg_1965))>= 0 and to_integer(unsigned(zext_ln216_reg_1965))<=511) else "-";
    p_Result_3_fu_1313_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_1_fu_1309_p1)) downto to_integer(unsigned(zext_ln216_1_fu_1309_p1))) when (to_integer(unsigned(zext_ln216_1_fu_1309_p1))>= 0 and to_integer(unsigned(zext_ln216_1_fu_1309_p1))<=511) else "-";
    p_Result_4_fu_1380_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_1_reg_2015)) downto to_integer(unsigned(zext_ln216_1_reg_2015))) when (to_integer(unsigned(zext_ln216_1_reg_2015))>= 0 and to_integer(unsigned(zext_ln216_1_reg_2015))<=511) else "-";
    p_Result_5_fu_1472_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_2_fu_1468_p1)) downto to_integer(unsigned(zext_ln216_2_fu_1468_p1))) when (to_integer(unsigned(zext_ln216_2_fu_1468_p1))>= 0 and to_integer(unsigned(zext_ln216_2_fu_1468_p1))<=511) else "-";
    p_Result_6_fu_1520_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_2_reg_2085)) downto to_integer(unsigned(zext_ln216_2_reg_2085))) when (to_integer(unsigned(zext_ln216_2_reg_2085))>= 0 and to_integer(unsigned(zext_ln216_2_reg_2085))<=511) else "-";
    p_Result_7_fu_1536_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_3_fu_1532_p1)) downto to_integer(unsigned(zext_ln216_3_fu_1532_p1))) when (to_integer(unsigned(zext_ln216_3_fu_1532_p1))>= 0 and to_integer(unsigned(zext_ln216_3_fu_1532_p1))<=511) else "-";
    p_Result_8_fu_1579_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_3_reg_2115)) downto to_integer(unsigned(zext_ln216_3_reg_2115))) when (to_integer(unsigned(zext_ln216_3_reg_2115))>= 0 and to_integer(unsigned(zext_ln216_3_reg_2115))<=511) else "-";
    p_Result_s_fu_1226_p3 <= gmem0_RDATA(to_integer(unsigned(zext_ln216_fu_1222_p1)) downto to_integer(unsigned(zext_ln216_fu_1222_p1))) when (to_integer(unsigned(zext_ln216_fu_1222_p1))>= 0 and to_integer(unsigned(zext_ln216_fu_1222_p1))<=511) else "-";
    packOfst_fu_1621_p2 <= std_logic_vector(unsigned(packOfst_1_reg_480) + unsigned(ap_const_lv4_1));
        sext_ln225_1_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln225_8_reg_1797),64));

        sext_ln225_2_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln225_s_reg_1846),64));

        sext_ln225_3_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln225_11_reg_1867),64));

        sext_ln225_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln225_6_reg_1758),64));

        sext_ln226_1_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_1802),64));

        sext_ln226_2_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln226_6_reg_1851),64));

        sext_ln226_3_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln226_8_reg_1872),64));

        sext_ln226_4_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln226_2_fu_1004_p4),16));

        sext_ln226_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln226_4_reg_1763),64));

        sext_ln819_1_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln819_1_reg_1753),64));

        sext_ln819_2_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln819_2_reg_1813),64));

        sext_ln819_3_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln819_3_reg_1818),64));

        sext_ln819_4_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln819_4_reg_1901),64));

        sext_ln819_5_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln819_5_reg_1906),64));

        sext_ln819_6_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln819_6_reg_1935),64));

        sext_ln819_7_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln819_7_reg_1940),64));

        sext_ln819_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_1748),64));

    shl_ln1_fu_623_p3 <= (trunc_ln_fu_613_p4 & ap_const_lv6_0);
    shl_ln225_1_fu_1257_p3 <= (add_ln225_4_fu_1252_p2 & ap_const_lv3_0);
    shl_ln225_2_fu_752_p3 <= (Ofst_1_fu_737_p2 & ap_const_lv2_0);
    shl_ln225_3_fu_1333_p3 <= (add_ln225_5_fu_1328_p2 & ap_const_lv3_0);
    shl_ln225_4_fu_898_p3 <= (Ofst_2_fu_883_p2 & ap_const_lv2_0);
    shl_ln225_5_fu_1399_p3 <= (add_ln225_6_fu_1394_p2 & ap_const_lv3_0);
    shl_ln225_6_fu_973_p3 <= (Ofst_3_fu_958_p2 & ap_const_lv2_0);
    shl_ln225_7_fu_1480_p3 <= (add_ln225_7_reg_2065 & ap_const_lv3_0);
    shl_ln226_1_fu_1359_p3 <= (add_ln226_3_fu_1354_p2 & ap_const_lv3_0);
    shl_ln226_2_fu_1425_p3 <= (add_ln226_5_fu_1420_p2 & ap_const_lv3_0);
    shl_ln226_3_fu_1500_p3 <= (add_ln226_7_reg_2075 & ap_const_lv3_0);
    shl_ln2_fu_665_p3 <= (Ofst_fu_609_p1 & ap_const_lv2_0);
    shl_ln3_fu_1283_p3 <= (add_ln226_1_fu_1278_p2 & ap_const_lv3_0);
    shl_ln819_1_fu_822_p3 <= (trunc_ln215_1_reg_1786 & ap_const_lv6_0);
    shl_ln819_2_fu_1077_p3 <= (trunc_ln215_2_reg_1835 & ap_const_lv6_0);
    shl_ln819_3_fu_1158_p3 <= (trunc_ln215_3_reg_1856 & ap_const_lv6_0);
    shl_ln_fu_1544_p3 <= (stage_fu_192 & ap_const_lv14_0);
    spinOfst_2_fu_1463_p2 <= std_logic_vector(unsigned(spinOfst_4_reg_1957) + unsigned(ap_const_lv9_1FE));
    spinOfst_3_fu_1527_p2 <= std_logic_vector(unsigned(spinOfst_4_reg_1957) + unsigned(ap_const_lv9_1FD));
    spinOfst_4_fu_1219_p1 <= stage_fu_192(9 - 1 downto 0);
    spinOfst_fu_1304_p2 <= std_logic_vector(unsigned(spinOfst_4_reg_1957) + unsigned(ap_const_lv9_1FF));
    tmp_fu_1592_p3 <= stage_fu_192(12 downto 12);
    trunc_ln225_10_fu_1446_p3 <= (trunc_ln225_13_reg_1862 & ap_const_lv2_0);
    trunc_ln225_12_fu_1416_p1 <= lshr_ln225_2_fu_1411_p2(32 - 1 downto 0);
    trunc_ln225_13_fu_985_p1 <= Ofst_3_fu_958_p2(4 - 1 downto 0);
    trunc_ln225_14_fu_1496_p1 <= lshr_ln225_3_fu_1491_p2(32 - 1 downto 0);
    trunc_ln225_1_fu_1241_p1 <= stage_fu_192(4 - 1 downto 0);
    trunc_ln225_2_fu_1274_p1 <= lshr_ln225_fu_1269_p2(32 - 1 downto 0);
    trunc_ln225_3_fu_764_p1 <= Ofst_1_fu_737_p2(4 - 1 downto 0);
    trunc_ln225_4_fu_1244_p3 <= (trunc_ln225_1_fu_1241_p1 & ap_const_lv2_0);
    trunc_ln225_5_fu_1350_p1 <= lshr_ln225_1_fu_1345_p2(32 - 1 downto 0);
    trunc_ln225_7_fu_910_p1 <= Ofst_2_fu_883_p2(4 - 1 downto 0);
    trunc_ln225_9_fu_1387_p3 <= (trunc_ln225_7_reg_1841 & ap_const_lv2_0);
    trunc_ln225_fu_586_p1 <= h(6 - 1 downto 0);
    trunc_ln226_1_fu_1300_p1 <= lshr_ln226_fu_1295_p2(32 - 1 downto 0);
    trunc_ln226_2_fu_1376_p1 <= lshr_ln226_1_fu_1371_p2(32 - 1 downto 0);
    trunc_ln226_3_fu_1442_p1 <= lshr_ln226_2_fu_1437_p2(32 - 1 downto 0);
    trunc_ln226_5_fu_1516_p1 <= lshr_ln226_3_fu_1511_p2(32 - 1 downto 0);
    trunc_ln226_fu_590_p1 <= logRand(6 - 1 downto 0);
    trunc_ln251_fu_1610_p1 <= packOfst_1_reg_480(3 - 1 downto 0);
    trunc_ln3_fu_1321_p3 <= (trunc_ln225_3_reg_1792 & ap_const_lv2_0);
    trunc_ln_fu_613_p4 <= stage_fu_192(11 downto 9);
    zext_ln214_fu_1551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1544_p3),64));
    zext_ln216_1_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(spinOfst_fu_1304_p2),32));
    zext_ln216_2_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(spinOfst_2_fu_1463_p2),32));
    zext_ln216_3_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(spinOfst_3_fu_1527_p2),32));
    zext_ln216_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(spinOfst_4_fu_1219_p1),32));
    zext_ln225_1_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln225_1_fu_1257_p3),512));
    zext_ln225_2_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln225_2_fu_752_p3),64));
    zext_ln225_3_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln225_3_fu_1333_p3),512));
    zext_ln225_4_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln225_4_fu_898_p3),64));
    zext_ln225_5_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln225_5_fu_1399_p3),512));
    zext_ln225_6_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln225_6_fu_973_p3),64));
    zext_ln225_7_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln225_7_fu_1480_p3),512));
    zext_ln225_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_665_p3),64));
    zext_ln226_1_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_783_p4),64));
    zext_ln226_2_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln226_1_fu_1359_p3),512));
    zext_ln226_3_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln226_1_fu_929_p4),64));
    zext_ln226_4_fu_1433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln226_2_fu_1425_p3),512));
    zext_ln226_5_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln226_4_fu_1014_p1),64));
    zext_ln226_6_fu_1507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln226_3_fu_1500_p3),512));
    zext_ln226_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_1283_p3),512));
    zext_ln819_1_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln819_1_fu_822_p3),64));
    zext_ln819_2_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln819_2_fu_1077_p3),64));
    zext_ln819_3_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln819_3_fu_1158_p3),64));
    zext_ln819_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_623_p3),64));
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QuantumMonteCarloU50_TrotterUnitFinal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t,
        stage,
        iPack,
        iSpin,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        trotters,
        dH,
        upSpin,
        downSpin,
        Beta,
        dHTunnel,
        logRandNumber
);

parameter    ap_ST_fsm_state1 = 144'd1;
parameter    ap_ST_fsm_state2 = 144'd2;
parameter    ap_ST_fsm_state3 = 144'd4;
parameter    ap_ST_fsm_state4 = 144'd8;
parameter    ap_ST_fsm_state5 = 144'd16;
parameter    ap_ST_fsm_state6 = 144'd32;
parameter    ap_ST_fsm_state7 = 144'd64;
parameter    ap_ST_fsm_state8 = 144'd128;
parameter    ap_ST_fsm_state9 = 144'd256;
parameter    ap_ST_fsm_state10 = 144'd512;
parameter    ap_ST_fsm_state11 = 144'd1024;
parameter    ap_ST_fsm_state12 = 144'd2048;
parameter    ap_ST_fsm_state13 = 144'd4096;
parameter    ap_ST_fsm_state14 = 144'd8192;
parameter    ap_ST_fsm_state15 = 144'd16384;
parameter    ap_ST_fsm_state16 = 144'd32768;
parameter    ap_ST_fsm_state17 = 144'd65536;
parameter    ap_ST_fsm_state18 = 144'd131072;
parameter    ap_ST_fsm_state19 = 144'd262144;
parameter    ap_ST_fsm_state20 = 144'd524288;
parameter    ap_ST_fsm_state21 = 144'd1048576;
parameter    ap_ST_fsm_state22 = 144'd2097152;
parameter    ap_ST_fsm_state23 = 144'd4194304;
parameter    ap_ST_fsm_state24 = 144'd8388608;
parameter    ap_ST_fsm_state25 = 144'd16777216;
parameter    ap_ST_fsm_state26 = 144'd33554432;
parameter    ap_ST_fsm_state27 = 144'd67108864;
parameter    ap_ST_fsm_state28 = 144'd134217728;
parameter    ap_ST_fsm_state29 = 144'd268435456;
parameter    ap_ST_fsm_state30 = 144'd536870912;
parameter    ap_ST_fsm_state31 = 144'd1073741824;
parameter    ap_ST_fsm_state32 = 144'd2147483648;
parameter    ap_ST_fsm_state33 = 144'd4294967296;
parameter    ap_ST_fsm_state34 = 144'd8589934592;
parameter    ap_ST_fsm_state35 = 144'd17179869184;
parameter    ap_ST_fsm_state36 = 144'd34359738368;
parameter    ap_ST_fsm_state37 = 144'd68719476736;
parameter    ap_ST_fsm_state38 = 144'd137438953472;
parameter    ap_ST_fsm_state39 = 144'd274877906944;
parameter    ap_ST_fsm_state40 = 144'd549755813888;
parameter    ap_ST_fsm_state41 = 144'd1099511627776;
parameter    ap_ST_fsm_state42 = 144'd2199023255552;
parameter    ap_ST_fsm_state43 = 144'd4398046511104;
parameter    ap_ST_fsm_state44 = 144'd8796093022208;
parameter    ap_ST_fsm_state45 = 144'd17592186044416;
parameter    ap_ST_fsm_state46 = 144'd35184372088832;
parameter    ap_ST_fsm_state47 = 144'd70368744177664;
parameter    ap_ST_fsm_state48 = 144'd140737488355328;
parameter    ap_ST_fsm_state49 = 144'd281474976710656;
parameter    ap_ST_fsm_state50 = 144'd562949953421312;
parameter    ap_ST_fsm_state51 = 144'd1125899906842624;
parameter    ap_ST_fsm_state52 = 144'd2251799813685248;
parameter    ap_ST_fsm_state53 = 144'd4503599627370496;
parameter    ap_ST_fsm_state54 = 144'd9007199254740992;
parameter    ap_ST_fsm_state55 = 144'd18014398509481984;
parameter    ap_ST_fsm_state56 = 144'd36028797018963968;
parameter    ap_ST_fsm_state57 = 144'd72057594037927936;
parameter    ap_ST_fsm_state58 = 144'd144115188075855872;
parameter    ap_ST_fsm_state59 = 144'd288230376151711744;
parameter    ap_ST_fsm_state60 = 144'd576460752303423488;
parameter    ap_ST_fsm_state61 = 144'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 144'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 144'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 144'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 144'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 144'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 144'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 144'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 144'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 144'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 144'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 144'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 144'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 144'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 144'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 144'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 144'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 144'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 144'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 144'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 144'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 144'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 144'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 144'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 144'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 144'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 144'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 144'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 144'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 144'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 144'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 144'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 144'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 144'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 144'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 144'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 144'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 144'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 144'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 144'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 144'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 144'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 144'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 144'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 144'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 144'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 144'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 144'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 144'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 144'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 144'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 144'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 144'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 144'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 144'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 144'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 144'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 144'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 144'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 144'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 144'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 144'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 144'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 144'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 144'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 144'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 144'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 144'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 144'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 144'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 144'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 144'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 144'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 144'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 144'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 144'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 144'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 144'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 144'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 144'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 144'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 144'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 144'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 144'd11150372599265311570767859136324180752990208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] t;
input  [12:0] stage;
input  [2:0] iPack;
input  [8:0] iSpin;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [511:0] m_axi_gmem0_WDATA;
output  [63:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [511:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [63:0] trotters;
input  [31:0] dH;
input  [0:0] upSpin;
input  [0:0] downSpin;
input  [31:0] Beta;
input  [31:0] dHTunnel;
input  [31:0] logRandNumber;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem0_AWVALID;
reg m_axi_gmem0_WVALID;
reg m_axi_gmem0_ARVALID;
reg m_axi_gmem0_RREADY;
reg m_axi_gmem0_BREADY;

(* fsm_encoding = "none" *) reg   [143:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_state72;
reg    gmem0_blk_n_AW;
wire    ap_CS_fsm_state75;
reg    gmem0_blk_n_W;
wire    ap_CS_fsm_state76;
reg    gmem0_blk_n_B;
wire    ap_CS_fsm_state144;
reg   [0:0] inside_reg_472;
reg   [0:0] and_ln135_1_reg_557;
wire   [31:0] iSpin_cast_fu_213_p1;
reg   [31:0] iSpin_cast_reg_466;
wire   [0:0] inside_fu_247_p2;
reg   [57:0] trunc_ln_reg_476;
wire   [0:0] xor_ln1049_fu_281_p2;
reg   [0:0] xor_ln1049_reg_481;
reg   [63:0] gmem0_addr_reg_487;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] sub_reg_494;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_194_p2;
reg   [31:0] add4_reg_499;
wire   [31:0] select_ln1049_fu_313_p3;
reg   [31:0] select_ln1049_reg_504;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_203_p2;
reg   [31:0] div_reg_509;
wire    ap_CS_fsm_state12;
reg   [511:0] p_Val2_s_reg_515;
wire   [0:0] p_Result_1_fu_319_p3;
reg   [0:0] p_Result_1_reg_520;
wire   [31:0] grp_fu_198_p2;
reg   [31:0] dHTmp_reg_526;
wire   [31:0] dHTmp_1_fu_339_p3;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln135_fu_381_p2;
reg   [0:0] icmp_ln135_reg_537;
wire   [0:0] icmp_ln135_1_fu_387_p2;
reg   [0:0] icmp_ln135_1_reg_542;
wire   [0:0] icmp_ln135_2_fu_393_p2;
reg   [0:0] icmp_ln135_2_reg_547;
wire   [0:0] icmp_ln135_3_fu_399_p2;
reg   [0:0] icmp_ln135_3_reg_552;
wire   [0:0] and_ln135_1_fu_419_p2;
wire    ap_CS_fsm_state74;
reg   [511:0] p_Result_s_fu_430_p4;
reg   [511:0] p_Result_s_reg_561;
wire  signed [63:0] sext_ln819_fu_287_p1;
reg    ap_predicate_op370_writeresp_state144;
reg    ap_block_state144;
wire    ap_CS_fsm_state69;
wire   [12:0] t_cast_fu_217_p1;
wire   [0:0] icmp_ln110_fu_221_p2;
wire   [12:0] or_ln_fu_233_p3;
wire   [0:0] xor_ln110_fu_227_p2;
wire   [0:0] icmp_ln110_1_fu_241_p2;
wire   [8:0] shl_ln_fu_253_p3;
wire   [63:0] zext_ln819_fu_261_p1;
wire   [63:0] add_ln819_fu_265_p2;
wire   [0:0] xor_ln1049_1_fu_297_p2;
wire   [0:0] and_ln121_fu_302_p2;
wire   [31:0] select_ln121_fu_307_p3;
wire   [31:0] bitcast_ln131_fu_326_p1;
wire   [31:0] xor_ln131_fu_329_p2;
wire   [31:0] bitcast_ln131_1_fu_335_p1;
wire   [31:0] bitcast_ln135_fu_346_p1;
wire   [31:0] bitcast_ln135_1_fu_364_p1;
wire   [7:0] tmp_fu_350_p4;
wire   [22:0] trunc_ln135_fu_360_p1;
wire   [7:0] tmp_1_fu_367_p4;
wire   [22:0] trunc_ln135_1_fu_377_p1;
wire   [0:0] or_ln135_fu_405_p2;
wire   [0:0] or_ln135_1_fu_409_p2;
wire   [0:0] and_ln135_fu_413_p2;
wire   [0:0] grp_fu_209_p2;
wire   [0:0] p_Repl2_s_fu_425_p2;
reg    grp_fu_190_ce;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_fu_194_ce;
reg    grp_fu_198_ce;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
reg    grp_fu_203_ce;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [143:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
reg    ap_ST_fsm_state144_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 144'd1;
end

QuantumMonteCarloU50_fsub_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_7_full_dsp_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dH),
    .din1(dHTunnel),
    .ce(grp_fu_190_ce),
    .dout(grp_fu_190_p2)
);

QuantumMonteCarloU50_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dH),
    .din1(dHTunnel),
    .ce(grp_fu_194_ce),
    .dout(grp_fu_194_p2)
);

QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1049_reg_504),
    .din1(32'd1073741824),
    .ce(grp_fu_198_ce),
    .dout(grp_fu_198_p2)
);

QuantumMonteCarloU50_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(logRandNumber),
    .din1(Beta),
    .ce(grp_fu_203_ce),
    .dout(grp_fu_203_p2)
);

QuantumMonteCarloU50_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dHTmp_1_fu_339_p3),
    .din1(div_reg_509),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_209_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((xor_ln1049_reg_481 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add4_reg_499 <= grp_fu_194_p2;
        sub_reg_494 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        and_ln135_1_reg_557 <= and_ln135_1_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        dHTmp_reg_526 <= grp_fu_198_p2;
        p_Result_1_reg_520 <= p_Result_1_fu_319_p3;
        p_Val2_s_reg_515 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        div_reg_509 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem0_addr_reg_487 <= sext_ln819_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        iSpin_cast_reg_466[8 : 0] <= iSpin_cast_fu_213_p1[8 : 0];
        inside_reg_472 <= inside_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        icmp_ln135_1_reg_542 <= icmp_ln135_1_fu_387_p2;
        icmp_ln135_2_reg_547 <= icmp_ln135_2_fu_393_p2;
        icmp_ln135_3_reg_552 <= icmp_ln135_3_fu_399_p2;
        icmp_ln135_reg_537 <= icmp_ln135_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln135_1_fu_419_p2) & (1'b1 == ap_CS_fsm_state74))) begin
        p_Result_s_reg_561 <= p_Result_s_fu_430_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        select_ln1049_reg_504 <= select_ln1049_fu_313_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((inside_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln_reg_476 <= {{add_ln819_fu_265_p2[63:6]}};
        xor_ln1049_reg_481 <= xor_ln1049_fu_281_p2;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

always @ (*) begin
    if (((ap_predicate_op370_writeresp_state144 == 1'b1) & (m_axi_gmem0_BVALID == 1'b0))) begin
        ap_ST_fsm_state144_blk = 1'b1;
    end else begin
        ap_ST_fsm_state144_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem0_RVALID == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem0_WREADY == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((~((ap_predicate_op370_writeresp_state144 == 1'b1) & (m_axi_gmem0_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state144)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op370_writeresp_state144 == 1'b1) & (m_axi_gmem0_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state144))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln135_1_reg_557) & (inside_reg_472 == 1'd1) & (1'b1 == ap_CS_fsm_state144))) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem0_ARREADY == 1'b1)))) begin
        grp_fu_190_ce = 1'b1;
    end else begin
        grp_fu_190_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem0_ARREADY == 1'b1)))) begin
        grp_fu_194_ce = 1'b1;
    end else begin
        grp_fu_194_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | ((m_axi_gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72)))) begin
        grp_fu_198_ce = 1'b1;
    end else begin
        grp_fu_198_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem0_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        grp_fu_203_ce = 1'b1;
    end else begin
        grp_fu_203_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem0_ARREADY == 1'b1))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem0_AWREADY == 1'b1))) begin
        m_axi_gmem0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op370_writeresp_state144 == 1'b1) & (m_axi_gmem0_BVALID == 1'b0)) & (ap_predicate_op370_writeresp_state144 == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
        m_axi_gmem0_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem0_WREADY == 1'b1))) begin
        m_axi_gmem0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((inside_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else if (((inside_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem0_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((m_axi_gmem0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((1'd0 == and_ln135_1_fu_419_p2) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (m_axi_gmem0_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (m_axi_gmem0_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if ((~((ap_predicate_op370_writeresp_state144 == 1'b1) & (m_axi_gmem0_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state144))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln819_fu_265_p2 = (zext_ln819_fu_261_p1 + trotters);

assign and_ln121_fu_302_p2 = (xor_ln1049_1_fu_297_p2 & upSpin);

assign and_ln135_1_fu_419_p2 = (grp_fu_209_p2 & and_ln135_fu_413_p2);

assign and_ln135_fu_413_p2 = (or_ln135_fu_405_p2 & or_ln135_1_fu_409_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state144 = ((ap_predicate_op370_writeresp_state144 == 1'b1) & (m_axi_gmem0_BVALID == 1'b0));
end

always @ (*) begin
    ap_predicate_op370_writeresp_state144 = ((1'd1 == and_ln135_1_reg_557) & (inside_reg_472 == 1'd1));
end

assign bitcast_ln131_1_fu_335_p1 = xor_ln131_fu_329_p2;

assign bitcast_ln131_fu_326_p1 = dHTmp_reg_526;

assign bitcast_ln135_1_fu_364_p1 = div_reg_509;

assign bitcast_ln135_fu_346_p1 = dHTmp_1_fu_339_p3;

assign dHTmp_1_fu_339_p3 = ((p_Result_1_reg_520[0:0] == 1'b1) ? bitcast_ln131_1_fu_335_p1 : dHTmp_reg_526);

assign iSpin_cast_fu_213_p1 = iSpin;

assign icmp_ln110_1_fu_241_p2 = ((or_ln_fu_233_p3 > stage) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_221_p2 = ((stage < t_cast_fu_217_p1) ? 1'b1 : 1'b0);

assign icmp_ln135_1_fu_387_p2 = ((trunc_ln135_fu_360_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln135_2_fu_393_p2 = ((tmp_1_fu_367_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln135_3_fu_399_p2 = ((trunc_ln135_1_fu_377_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_381_p2 = ((tmp_fu_350_p4 != 8'd255) ? 1'b1 : 1'b0);

assign inside_fu_247_p2 = (xor_ln110_fu_227_p2 & icmp_ln110_1_fu_241_p2);

assign m_axi_gmem0_ARADDR = sext_ln819_fu_287_p1;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd1;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = gmem0_addr_reg_487;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd1;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_WDATA = p_Result_s_reg_561;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem0_WUSER = 1'd0;

assign or_ln135_1_fu_409_p2 = (icmp_ln135_3_reg_552 | icmp_ln135_2_reg_547);

assign or_ln135_fu_405_p2 = (icmp_ln135_reg_537 | icmp_ln135_1_reg_542);

assign or_ln_fu_233_p3 = {{11'd1024}, {t}};

assign p_Repl2_s_fu_425_p2 = (p_Result_1_reg_520 ^ 1'd1);

assign p_Result_1_fu_319_p3 = m_axi_gmem0_RDATA[iSpin_cast_reg_466];

always @ (*) begin
    p_Result_s_fu_430_p4 = p_Val2_s_reg_515;
    p_Result_s_fu_430_p4[iSpin_cast_reg_466] = |(p_Repl2_s_fu_425_p2);
end

assign select_ln1049_fu_313_p3 = ((xor_ln1049_reg_481[0:0] == 1'b1) ? dH : select_ln121_fu_307_p3);

assign select_ln121_fu_307_p3 = ((and_ln121_fu_302_p2[0:0] == 1'b1) ? sub_reg_494 : add4_reg_499);

assign sext_ln819_fu_287_p1 = $signed(trunc_ln_reg_476);

assign shl_ln_fu_253_p3 = {{iPack}, {6'd0}};

assign t_cast_fu_217_p1 = t;

assign tmp_1_fu_367_p4 = {{bitcast_ln135_1_fu_364_p1[30:23]}};

assign tmp_fu_350_p4 = {{bitcast_ln135_fu_346_p1[30:23]}};

assign trunc_ln135_1_fu_377_p1 = bitcast_ln135_1_fu_364_p1[22:0];

assign trunc_ln135_fu_360_p1 = bitcast_ln135_fu_346_p1[22:0];

assign xor_ln1049_1_fu_297_p2 = (xor_ln1049_reg_481 ^ 1'd1);

assign xor_ln1049_fu_281_p2 = (upSpin ^ downSpin);

assign xor_ln110_fu_227_p2 = (icmp_ln110_fu_221_p2 ^ 1'd1);

assign xor_ln131_fu_329_p2 = (bitcast_ln131_fu_326_p1 ^ 32'd2147483648);

assign zext_ln819_fu_261_p1 = shl_ln_fu_253_p3;

always @ (posedge ap_clk) begin
    iSpin_cast_reg_466[31:9] <= 23'b00000000000000000000000;
end

endmodule //QuantumMonteCarloU50_TrotterUnitFinal

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity QuantumMonteCarloU50_TrotterUnitFinal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    stage : IN STD_LOGIC_VECTOR (12 downto 0);
    iPack : IN STD_LOGIC_VECTOR (2 downto 0);
    iSpin : IN STD_LOGIC_VECTOR (8 downto 0);
    trotters_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    trotters_ce0 : OUT STD_LOGIC;
    trotters_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    trotters_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    trotters_ce1 : OUT STD_LOGIC;
    trotters_we1 : OUT STD_LOGIC;
    trotters_d1 : OUT STD_LOGIC_VECTOR (511 downto 0);
    dH : IN STD_LOGIC_VECTOR (31 downto 0);
    upSpin : IN STD_LOGIC_VECTOR (0 downto 0);
    downSpin : IN STD_LOGIC_VECTOR (0 downto 0);
    Beta : IN STD_LOGIC_VECTOR (31 downto 0);
    dHTunnel : IN STD_LOGIC_VECTOR (31 downto 0);
    logRandNumber : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of QuantumMonteCarloU50_TrotterUnitFinal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal iSpin_cast_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iSpin_cast_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal inside_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inside_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add4_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1049_fu_230_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1049_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trotters_addr_reg_423 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_435 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Result_1_fu_240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_440 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dHTmp_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal dHTmp_1_fu_260_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln135_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_1_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_2_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_2_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_3_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_3_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln135_1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln135_1_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Result_s_fu_351_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_reg_481 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln117_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal t_offset_cast_fu_172_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln110_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_188_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln110_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_1_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_fu_224_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln131_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln131_1_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln135_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln135_1_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_271_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln135_fu_281_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_288_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln135_1_fu_298_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln135_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln135_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln135_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_s_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component QuantumMonteCarloU50_fsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fsub_32ns_32ns_32_7_full_dsp_1_U85 : component QuantumMonteCarloU50_fsub_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dH,
        din1 => dHTunnel,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U86 : component QuantumMonteCarloU50_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dH,
        din1 => dHTunnel,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U87 : component QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln1049_reg_418,
        din1 => ap_const_lv32_40000000,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U88 : component QuantumMonteCarloU50_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => logRandNumber,
        din1 => Beta,
        ce => ap_const_logic_1,
        dout => grp_fu_158_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U89 : component QuantumMonteCarloU50_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dHTmp_1_fu_260_p3,
        din1 => div_reg_429,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_164_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((xor_ln1049_reg_402 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add4_reg_413 <= grp_fu_149_p2;
                sub_reg_408 <= grp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                and_ln135_1_reg_477 <= and_ln135_1_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                dHTmp_reg_446 <= grp_fu_153_p2;
                p_Result_1_reg_440 <= p_Result_1_fu_240_p3;
                p_Val2_s_reg_435 <= trotters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                div_reg_429 <= grp_fu_158_p2;
                trotters_addr_reg_423 <= zext_ln117_fu_236_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    iSpin_cast_reg_392(8 downto 0) <= iSpin_cast_fu_168_p1(8 downto 0);
                inside_reg_398 <= inside_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                icmp_ln135_1_reg_462 <= icmp_ln135_1_fu_308_p2;
                icmp_ln135_2_reg_467 <= icmp_ln135_2_fu_314_p2;
                icmp_ln135_3_reg_472 <= icmp_ln135_3_fu_320_p2;
                icmp_ln135_reg_457 <= icmp_ln135_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln135_1_fu_340_p2) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                p_Result_s_reg_481 <= p_Result_s_fu_351_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln1049_reg_418 <= select_ln1049_fu_230_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inside_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                xor_ln1049_reg_402 <= xor_ln1049_fu_208_p2;
            end if;
        end if;
    end process;
    iSpin_cast_reg_392(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inside_fu_202_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((inside_fu_202_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((inside_fu_202_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln121_fu_219_p2 <= (xor_ln1049_1_fu_214_p2 and upSpin);
    and_ln135_1_fu_340_p2 <= (grp_fu_164_p2 and and_ln135_fu_334_p2);
    and_ln135_fu_334_p2 <= (or_ln135_fu_326_p2 and or_ln135_1_fu_330_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln131_1_fu_256_p1 <= xor_ln131_fu_250_p2;
    bitcast_ln131_fu_247_p1 <= dHTmp_reg_446;
    bitcast_ln135_1_fu_285_p1 <= div_reg_429;
    bitcast_ln135_fu_267_p1 <= dHTmp_1_fu_260_p3;
    dHTmp_1_fu_260_p3 <= 
        bitcast_ln131_1_fu_256_p1 when (p_Result_1_reg_440(0) = '1') else 
        dHTmp_reg_446;
    iSpin_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iSpin),32));
    icmp_ln110_1_fu_196_p2 <= "1" when (unsigned(or_ln_fu_188_p3) > unsigned(stage)) else "0";
    icmp_ln110_fu_176_p2 <= "1" when (unsigned(stage) < unsigned(t_offset_cast_fu_172_p1)) else "0";
    icmp_ln135_1_fu_308_p2 <= "1" when (trunc_ln135_fu_281_p1 = ap_const_lv23_0) else "0";
    icmp_ln135_2_fu_314_p2 <= "0" when (tmp_1_fu_288_p4 = ap_const_lv8_FF) else "1";
    icmp_ln135_3_fu_320_p2 <= "1" when (trunc_ln135_1_fu_298_p1 = ap_const_lv23_0) else "0";
    icmp_ln135_fu_302_p2 <= "0" when (tmp_fu_271_p4 = ap_const_lv8_FF) else "1";
    inside_fu_202_p2 <= (xor_ln110_fu_182_p2 and icmp_ln110_1_fu_196_p2);
    or_ln135_1_fu_330_p2 <= (icmp_ln135_3_reg_472 or icmp_ln135_2_reg_467);
    or_ln135_fu_326_p2 <= (icmp_ln135_reg_457 or icmp_ln135_1_reg_462);
    or_ln_fu_188_p3 <= (ap_const_lv11_400 & t_offset);
    p_Repl2_s_fu_346_p2 <= (p_Result_1_reg_440 xor ap_const_lv1_1);
    p_Result_1_fu_240_p3 <= trotters_q0(to_integer(unsigned(iSpin_cast_reg_392)) downto to_integer(unsigned(iSpin_cast_reg_392))) when (to_integer(unsigned(iSpin_cast_reg_392))>= 0 and to_integer(unsigned(iSpin_cast_reg_392))<=511) else "-";
    
    p_Result_s_fu_351_p4_proc : process(p_Val2_s_reg_435, iSpin_cast_reg_392, p_Repl2_s_fu_346_p2)
    begin
        p_Result_s_fu_351_p4 <= p_Val2_s_reg_435;
        if to_integer(unsigned(iSpin_cast_reg_392)) >= p_Val2_s_reg_435'low and to_integer(unsigned(iSpin_cast_reg_392)) <= p_Val2_s_reg_435'high then
            p_Result_s_fu_351_p4(to_integer(unsigned(iSpin_cast_reg_392))) <= p_Repl2_s_fu_346_p2(0);
        end if;
    end process;

    select_ln1049_fu_230_p3 <= 
        dH when (xor_ln1049_reg_402(0) = '1') else 
        select_ln121_fu_224_p3;
    select_ln121_fu_224_p3 <= 
        sub_reg_408 when (and_ln121_fu_219_p2(0) = '1') else 
        add4_reg_413;
    t_offset_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_offset),13));
    tmp_1_fu_288_p4 <= bitcast_ln135_1_fu_285_p1(30 downto 23);
    tmp_fu_271_p4 <= bitcast_ln135_fu_267_p1(30 downto 23);
    trotters_address0 <= zext_ln117_fu_236_p1(3 - 1 downto 0);
    trotters_address1 <= trotters_addr_reg_423;

    trotters_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters_ce0 <= ap_const_logic_1;
        else 
            trotters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters_ce1_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters_ce1 <= ap_const_logic_1;
        else 
            trotters_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    trotters_d1 <= p_Result_s_reg_481;

    trotters_we1_assign_proc : process(inside_reg_398, and_ln135_1_reg_477, ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = and_ln135_1_reg_477) and (inside_reg_398 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            trotters_we1 <= ap_const_logic_1;
        else 
            trotters_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln135_1_fu_298_p1 <= bitcast_ln135_1_fu_285_p1(23 - 1 downto 0);
    trunc_ln135_fu_281_p1 <= bitcast_ln135_fu_267_p1(23 - 1 downto 0);
    xor_ln1049_1_fu_214_p2 <= (xor_ln1049_reg_402 xor ap_const_lv1_1);
    xor_ln1049_fu_208_p2 <= (upSpin xor downSpin);
    xor_ln110_fu_182_p2 <= (icmp_ln110_fu_176_p2 xor ap_const_lv1_1);
    xor_ln131_fu_250_p2 <= (bitcast_ln131_fu_247_p1 xor ap_const_lv32_80000000);
    zext_ln117_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iPack),64));
end behav;

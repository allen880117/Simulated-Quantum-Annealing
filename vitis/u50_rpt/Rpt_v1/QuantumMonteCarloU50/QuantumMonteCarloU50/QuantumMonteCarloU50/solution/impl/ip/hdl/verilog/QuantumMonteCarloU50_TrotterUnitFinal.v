// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QuantumMonteCarloU50_TrotterUnitFinal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_offset,
        stage,
        iPack,
        iSpin,
        trotters_address0,
        trotters_ce0,
        trotters_q0,
        trotters_address1,
        trotters_ce1,
        trotters_we1,
        trotters_d1,
        dH,
        upSpin,
        downSpin,
        Beta,
        dHTunnel,
        logRandNumber
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] t_offset;
input  [12:0] stage;
input  [2:0] iPack;
input  [8:0] iSpin;
output  [2:0] trotters_address0;
output   trotters_ce0;
input  [511:0] trotters_q0;
output  [2:0] trotters_address1;
output   trotters_ce1;
output   trotters_we1;
output  [511:0] trotters_d1;
input  [31:0] dH;
input  [0:0] upSpin;
input  [0:0] downSpin;
input  [31:0] Beta;
input  [31:0] dHTunnel;
input  [31:0] logRandNumber;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg trotters_ce0;
reg trotters_ce1;
reg trotters_we1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] iSpin_cast_fu_168_p1;
reg   [31:0] iSpin_cast_reg_392;
wire   [0:0] inside_fu_202_p2;
reg   [0:0] inside_reg_398;
wire   [0:0] xor_ln1049_fu_208_p2;
reg   [0:0] xor_ln1049_reg_402;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] sub_reg_408;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] add4_reg_413;
wire   [31:0] select_ln1049_fu_230_p3;
reg   [31:0] select_ln1049_reg_418;
wire    ap_CS_fsm_state9;
reg   [2:0] trotters_addr_reg_423;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_158_p2;
reg   [31:0] div_reg_429;
reg   [511:0] p_Val2_s_reg_435;
wire    ap_CS_fsm_state13;
wire   [0:0] p_Result_1_fu_240_p3;
reg   [0:0] p_Result_1_reg_440;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] dHTmp_reg_446;
wire   [31:0] dHTmp_1_fu_260_p3;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln135_fu_302_p2;
reg   [0:0] icmp_ln135_reg_457;
wire   [0:0] icmp_ln135_1_fu_308_p2;
reg   [0:0] icmp_ln135_1_reg_462;
wire   [0:0] icmp_ln135_2_fu_314_p2;
reg   [0:0] icmp_ln135_2_reg_467;
wire   [0:0] icmp_ln135_3_fu_320_p2;
reg   [0:0] icmp_ln135_3_reg_472;
wire   [0:0] and_ln135_1_fu_340_p2;
reg   [0:0] and_ln135_1_reg_477;
wire    ap_CS_fsm_state15;
reg   [511:0] p_Result_s_fu_351_p4;
reg   [511:0] p_Result_s_reg_481;
wire   [63:0] zext_ln117_fu_236_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state10;
wire   [12:0] t_offset_cast_fu_172_p1;
wire   [0:0] icmp_ln110_fu_176_p2;
wire   [12:0] or_ln_fu_188_p3;
wire   [0:0] xor_ln110_fu_182_p2;
wire   [0:0] icmp_ln110_1_fu_196_p2;
wire   [0:0] xor_ln1049_1_fu_214_p2;
wire   [0:0] and_ln121_fu_219_p2;
wire   [31:0] select_ln121_fu_224_p3;
wire   [31:0] bitcast_ln131_fu_247_p1;
wire   [31:0] xor_ln131_fu_250_p2;
wire   [31:0] bitcast_ln131_1_fu_256_p1;
wire   [31:0] bitcast_ln135_fu_267_p1;
wire   [31:0] bitcast_ln135_1_fu_285_p1;
wire   [7:0] tmp_fu_271_p4;
wire   [22:0] trunc_ln135_fu_281_p1;
wire   [7:0] tmp_1_fu_288_p4;
wire   [22:0] trunc_ln135_1_fu_298_p1;
wire   [0:0] or_ln135_fu_326_p2;
wire   [0:0] or_ln135_1_fu_330_p2;
wire   [0:0] and_ln135_fu_334_p2;
wire   [0:0] grp_fu_164_p2;
wire   [0:0] p_Repl2_s_fu_346_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

QuantumMonteCarloU50_fsub_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_7_full_dsp_1_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dH),
    .din1(dHTunnel),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

QuantumMonteCarloU50_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dH),
    .din1(dHTunnel),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1049_reg_418),
    .din1(32'd1073741824),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

QuantumMonteCarloU50_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(logRandNumber),
    .din1(Beta),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

QuantumMonteCarloU50_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dHTmp_1_fu_260_p3),
    .din1(div_reg_429),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_164_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((xor_ln1049_reg_402 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add4_reg_413 <= grp_fu_149_p2;
        sub_reg_408 <= grp_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        and_ln135_1_reg_477 <= and_ln135_1_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        dHTmp_reg_446 <= grp_fu_153_p2;
        p_Result_1_reg_440 <= p_Result_1_fu_240_p3;
        p_Val2_s_reg_435 <= trotters_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        div_reg_429 <= grp_fu_158_p2;
        trotters_addr_reg_423 <= zext_ln117_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        iSpin_cast_reg_392[8 : 0] <= iSpin_cast_fu_168_p1[8 : 0];
        inside_reg_398 <= inside_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln135_1_reg_462 <= icmp_ln135_1_fu_308_p2;
        icmp_ln135_2_reg_467 <= icmp_ln135_2_fu_314_p2;
        icmp_ln135_3_reg_472 <= icmp_ln135_3_fu_320_p2;
        icmp_ln135_reg_457 <= icmp_ln135_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln135_1_fu_340_p2) & (1'b1 == ap_CS_fsm_state15))) begin
        p_Result_s_reg_481 <= p_Result_s_fu_351_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        select_ln1049_reg_418 <= select_ln1049_fu_230_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((inside_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xor_ln1049_reg_402 <= xor_ln1049_fu_208_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters_ce0 = 1'b1;
    end else begin
        trotters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters_ce1 = 1'b1;
    end else begin
        trotters_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln135_1_reg_477) & (inside_reg_398 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        trotters_we1 = 1'b1;
    end else begin
        trotters_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((inside_fu_202_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((inside_fu_202_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln121_fu_219_p2 = (xor_ln1049_1_fu_214_p2 & upSpin);

assign and_ln135_1_fu_340_p2 = (grp_fu_164_p2 & and_ln135_fu_334_p2);

assign and_ln135_fu_334_p2 = (or_ln135_fu_326_p2 & or_ln135_1_fu_330_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln131_1_fu_256_p1 = xor_ln131_fu_250_p2;

assign bitcast_ln131_fu_247_p1 = dHTmp_reg_446;

assign bitcast_ln135_1_fu_285_p1 = div_reg_429;

assign bitcast_ln135_fu_267_p1 = dHTmp_1_fu_260_p3;

assign dHTmp_1_fu_260_p3 = ((p_Result_1_reg_440[0:0] == 1'b1) ? bitcast_ln131_1_fu_256_p1 : dHTmp_reg_446);

assign iSpin_cast_fu_168_p1 = iSpin;

assign icmp_ln110_1_fu_196_p2 = ((or_ln_fu_188_p3 > stage) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_176_p2 = ((stage < t_offset_cast_fu_172_p1) ? 1'b1 : 1'b0);

assign icmp_ln135_1_fu_308_p2 = ((trunc_ln135_fu_281_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln135_2_fu_314_p2 = ((tmp_1_fu_288_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln135_3_fu_320_p2 = ((trunc_ln135_1_fu_298_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_302_p2 = ((tmp_fu_271_p4 != 8'd255) ? 1'b1 : 1'b0);

assign inside_fu_202_p2 = (xor_ln110_fu_182_p2 & icmp_ln110_1_fu_196_p2);

assign or_ln135_1_fu_330_p2 = (icmp_ln135_3_reg_472 | icmp_ln135_2_reg_467);

assign or_ln135_fu_326_p2 = (icmp_ln135_reg_457 | icmp_ln135_1_reg_462);

assign or_ln_fu_188_p3 = {{11'd1024}, {t_offset}};

assign p_Repl2_s_fu_346_p2 = (p_Result_1_reg_440 ^ 1'd1);

assign p_Result_1_fu_240_p3 = trotters_q0[iSpin_cast_reg_392];

always @ (*) begin
    p_Result_s_fu_351_p4 = p_Val2_s_reg_435;
    p_Result_s_fu_351_p4[iSpin_cast_reg_392] = |(p_Repl2_s_fu_346_p2);
end

assign select_ln1049_fu_230_p3 = ((xor_ln1049_reg_402[0:0] == 1'b1) ? dH : select_ln121_fu_224_p3);

assign select_ln121_fu_224_p3 = ((and_ln121_fu_219_p2[0:0] == 1'b1) ? sub_reg_408 : add4_reg_413);

assign t_offset_cast_fu_172_p1 = t_offset;

assign tmp_1_fu_288_p4 = {{bitcast_ln135_1_fu_285_p1[30:23]}};

assign tmp_fu_271_p4 = {{bitcast_ln135_fu_267_p1[30:23]}};

assign trotters_address0 = zext_ln117_fu_236_p1;

assign trotters_address1 = trotters_addr_reg_423;

assign trotters_d1 = p_Result_s_reg_481;

assign trunc_ln135_1_fu_298_p1 = bitcast_ln135_1_fu_285_p1[22:0];

assign trunc_ln135_fu_281_p1 = bitcast_ln135_fu_267_p1[22:0];

assign xor_ln1049_1_fu_214_p2 = (xor_ln1049_reg_402 ^ 1'd1);

assign xor_ln1049_fu_208_p2 = (upSpin ^ downSpin);

assign xor_ln110_fu_182_p2 = (icmp_ln110_fu_176_p2 ^ 1'd1);

assign xor_ln131_fu_250_p2 = (bitcast_ln131_fu_247_p1 ^ 32'd2147483648);

assign zext_ln117_fu_236_p1 = iPack;

always @ (posedge ap_clk) begin
    iSpin_cast_reg_392[31:9] <= 23'b00000000000000000000000;
end

endmodule //QuantumMonteCarloU50_TrotterUnitFinal

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QuantumMonteCarloU50_TrotterUnitFinal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_offset,
        stage,
        iPack,
        iSpin,
        trotters_address0,
        trotters_ce0,
        trotters_we0,
        trotters_d0,
        trotters_q0,
        trotters1_address0,
        trotters1_ce0,
        trotters1_we0,
        trotters1_d0,
        trotters1_q0,
        trotters2_address0,
        trotters2_ce0,
        trotters2_we0,
        trotters2_d0,
        trotters2_q0,
        trotters3_address0,
        trotters3_ce0,
        trotters3_we0,
        trotters3_d0,
        trotters3_q0,
        trotters4_address0,
        trotters4_ce0,
        trotters4_we0,
        trotters4_d0,
        trotters4_q0,
        trotters5_address0,
        trotters5_ce0,
        trotters5_we0,
        trotters5_d0,
        trotters5_q0,
        trotters6_address0,
        trotters6_ce0,
        trotters6_we0,
        trotters6_d0,
        trotters6_q0,
        trotters7_address0,
        trotters7_ce0,
        trotters7_we0,
        trotters7_d0,
        trotters7_q0,
        trotters8_address0,
        trotters8_ce0,
        trotters8_we0,
        trotters8_d0,
        trotters8_q0,
        trotters9_address0,
        trotters9_ce0,
        trotters9_we0,
        trotters9_d0,
        trotters9_q0,
        trotters10_address0,
        trotters10_ce0,
        trotters10_we0,
        trotters10_d0,
        trotters10_q0,
        trotters11_address0,
        trotters11_ce0,
        trotters11_we0,
        trotters11_d0,
        trotters11_q0,
        trotters12_address0,
        trotters12_ce0,
        trotters12_we0,
        trotters12_d0,
        trotters12_q0,
        trotters13_address0,
        trotters13_ce0,
        trotters13_we0,
        trotters13_d0,
        trotters13_q0,
        trotters14_address0,
        trotters14_ce0,
        trotters14_we0,
        trotters14_d0,
        trotters14_q0,
        trotters15_address0,
        trotters15_ce0,
        trotters15_we0,
        trotters15_d0,
        trotters15_q0,
        dH,
        upSpin,
        downSpin,
        Beta,
        dHTunnel,
        logRandNumber
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] t_offset;
input  [12:0] stage;
input  [7:0] iPack;
input  [31:0] iSpin;
output  [3:0] trotters_address0;
output   trotters_ce0;
output   trotters_we0;
output  [15:0] trotters_d0;
input  [15:0] trotters_q0;
output  [3:0] trotters1_address0;
output   trotters1_ce0;
output   trotters1_we0;
output  [15:0] trotters1_d0;
input  [15:0] trotters1_q0;
output  [3:0] trotters2_address0;
output   trotters2_ce0;
output   trotters2_we0;
output  [15:0] trotters2_d0;
input  [15:0] trotters2_q0;
output  [3:0] trotters3_address0;
output   trotters3_ce0;
output   trotters3_we0;
output  [15:0] trotters3_d0;
input  [15:0] trotters3_q0;
output  [3:0] trotters4_address0;
output   trotters4_ce0;
output   trotters4_we0;
output  [15:0] trotters4_d0;
input  [15:0] trotters4_q0;
output  [3:0] trotters5_address0;
output   trotters5_ce0;
output   trotters5_we0;
output  [15:0] trotters5_d0;
input  [15:0] trotters5_q0;
output  [3:0] trotters6_address0;
output   trotters6_ce0;
output   trotters6_we0;
output  [15:0] trotters6_d0;
input  [15:0] trotters6_q0;
output  [3:0] trotters7_address0;
output   trotters7_ce0;
output   trotters7_we0;
output  [15:0] trotters7_d0;
input  [15:0] trotters7_q0;
output  [3:0] trotters8_address0;
output   trotters8_ce0;
output   trotters8_we0;
output  [15:0] trotters8_d0;
input  [15:0] trotters8_q0;
output  [3:0] trotters9_address0;
output   trotters9_ce0;
output   trotters9_we0;
output  [15:0] trotters9_d0;
input  [15:0] trotters9_q0;
output  [3:0] trotters10_address0;
output   trotters10_ce0;
output   trotters10_we0;
output  [15:0] trotters10_d0;
input  [15:0] trotters10_q0;
output  [3:0] trotters11_address0;
output   trotters11_ce0;
output   trotters11_we0;
output  [15:0] trotters11_d0;
input  [15:0] trotters11_q0;
output  [3:0] trotters12_address0;
output   trotters12_ce0;
output   trotters12_we0;
output  [15:0] trotters12_d0;
input  [15:0] trotters12_q0;
output  [3:0] trotters13_address0;
output   trotters13_ce0;
output   trotters13_we0;
output  [15:0] trotters13_d0;
input  [15:0] trotters13_q0;
output  [3:0] trotters14_address0;
output   trotters14_ce0;
output   trotters14_we0;
output  [15:0] trotters14_d0;
input  [15:0] trotters14_q0;
output  [3:0] trotters15_address0;
output   trotters15_ce0;
output   trotters15_we0;
output  [15:0] trotters15_d0;
input  [15:0] trotters15_q0;
input  [31:0] dH;
input  [0:0] upSpin;
input  [0:0] downSpin;
input  [31:0] Beta;
input  [31:0] dHTunnel;
input  [31:0] logRandNumber;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] trotters_address0;
reg trotters_ce0;
reg trotters_we0;
reg[3:0] trotters1_address0;
reg trotters1_ce0;
reg trotters1_we0;
reg[3:0] trotters2_address0;
reg trotters2_ce0;
reg trotters2_we0;
reg[3:0] trotters3_address0;
reg trotters3_ce0;
reg trotters3_we0;
reg[3:0] trotters4_address0;
reg trotters4_ce0;
reg trotters4_we0;
reg[3:0] trotters5_address0;
reg trotters5_ce0;
reg trotters5_we0;
reg[3:0] trotters6_address0;
reg trotters6_ce0;
reg trotters6_we0;
reg[3:0] trotters7_address0;
reg trotters7_ce0;
reg trotters7_we0;
reg[3:0] trotters8_address0;
reg trotters8_ce0;
reg trotters8_we0;
reg[3:0] trotters9_address0;
reg trotters9_ce0;
reg trotters9_we0;
reg[3:0] trotters10_address0;
reg trotters10_ce0;
reg trotters10_we0;
reg[3:0] trotters11_address0;
reg trotters11_ce0;
reg trotters11_we0;
reg[3:0] trotters12_address0;
reg trotters12_ce0;
reg trotters12_we0;
reg[3:0] trotters13_address0;
reg trotters13_ce0;
reg trotters13_we0;
reg[3:0] trotters14_address0;
reg trotters14_ce0;
reg trotters14_we0;
reg[3:0] trotters15_address0;
reg trotters15_ce0;
reg trotters15_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] inside_fu_449_p2;
reg   [0:0] inside_reg_719;
wire   [0:0] xor_ln1049_fu_455_p2;
reg   [0:0] xor_ln1049_reg_723;
wire   [31:0] grp_fu_396_p2;
reg   [31:0] sub_reg_729;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_400_p2;
reg   [31:0] add4_reg_734;
wire   [31:0] select_ln1049_fu_477_p3;
reg   [31:0] select_ln1049_reg_739;
wire    ap_CS_fsm_state9;
wire   [3:0] trunc_ln819_fu_483_p1;
reg   [3:0] trunc_ln819_reg_744;
wire    ap_CS_fsm_state12;
reg   [3:0] trotters_addr_reg_749;
reg   [3:0] trotters1_addr_reg_754;
reg   [3:0] trotters2_addr_reg_759;
reg   [3:0] trotters3_addr_reg_764;
reg   [3:0] trotters4_addr_reg_769;
reg   [3:0] trotters5_addr_reg_774;
reg   [3:0] trotters6_addr_reg_779;
reg   [3:0] trotters7_addr_reg_784;
reg   [3:0] trotters8_addr_reg_789;
reg   [3:0] trotters9_addr_reg_794;
reg   [3:0] trotters10_addr_reg_799;
reg   [3:0] trotters11_addr_reg_804;
reg   [3:0] trotters12_addr_reg_809;
reg   [3:0] trotters13_addr_reg_814;
reg   [3:0] trotters14_addr_reg_819;
reg   [3:0] trotters15_addr_reg_824;
wire   [31:0] grp_fu_409_p2;
reg   [31:0] div_reg_829;
wire   [15:0] p_Val2_s_fu_518_p18;
reg   [15:0] p_Val2_s_reg_835;
wire    ap_CS_fsm_state13;
wire   [0:0] p_Result_1_fu_559_p3;
reg   [0:0] p_Result_1_reg_840;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] dHTmp_reg_846;
wire   [31:0] dHTmp_1_fu_580_p3;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln136_fu_622_p2;
reg   [0:0] icmp_ln136_reg_857;
wire   [0:0] icmp_ln136_1_fu_628_p2;
reg   [0:0] icmp_ln136_1_reg_862;
wire   [0:0] icmp_ln136_2_fu_634_p2;
reg   [0:0] icmp_ln136_2_reg_867;
wire   [0:0] icmp_ln136_3_fu_640_p2;
reg   [0:0] icmp_ln136_3_reg_872;
wire   [0:0] and_ln136_1_fu_660_p2;
reg   [0:0] and_ln136_1_reg_877;
wire    ap_CS_fsm_state15;
reg   [15:0] p_Result_s_fu_671_p4;
reg   [15:0] p_Result_s_reg_881;
wire   [63:0] zext_ln819_1_fu_495_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state10;
wire   [12:0] t_offset_cast_fu_419_p1;
wire   [0:0] icmp_ln111_fu_423_p2;
wire   [12:0] or_ln_fu_435_p3;
wire   [0:0] xor_ln111_fu_429_p2;
wire   [0:0] icmp_ln111_1_fu_443_p2;
wire   [0:0] xor_ln1049_1_fu_461_p2;
wire   [0:0] and_ln122_fu_466_p2;
wire   [31:0] select_ln122_fu_471_p3;
wire   [3:0] lshr_ln_fu_486_p4;
wire   [63:0] p_Val2_s_fu_518_p17;
wire   [15:0] trunc_ln819_1_fu_556_p1;
wire   [31:0] bitcast_ln132_fu_567_p1;
wire   [31:0] xor_ln132_fu_570_p2;
wire   [31:0] bitcast_ln132_1_fu_576_p1;
wire   [31:0] bitcast_ln136_fu_587_p1;
wire   [31:0] bitcast_ln136_1_fu_605_p1;
wire   [7:0] tmp_fu_591_p4;
wire   [22:0] trunc_ln136_fu_601_p1;
wire   [7:0] tmp_1_fu_608_p4;
wire   [22:0] trunc_ln136_1_fu_618_p1;
wire   [0:0] or_ln136_fu_646_p2;
wire   [0:0] or_ln136_1_fu_650_p2;
wire   [0:0] and_ln136_fu_654_p2;
wire   [0:0] grp_fu_415_p2;
wire   [0:0] p_Repl2_s_fu_666_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

QuantumMonteCarloU50_fsub_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_7_full_dsp_1_U501(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dH),
    .din1(dHTunnel),
    .ce(1'b1),
    .dout(grp_fu_396_p2)
);

QuantumMonteCarloU50_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U502(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dH),
    .din1(dHTunnel),
    .ce(1'b1),
    .dout(grp_fu_400_p2)
);

QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U503(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1049_reg_739),
    .din1(32'd1073741824),
    .ce(1'b1),
    .dout(grp_fu_404_p2)
);

QuantumMonteCarloU50_fdiv_32ns_32ns_32_12_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_12_no_dsp_1_U504(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(logRandNumber),
    .din1(Beta),
    .ce(1'b1),
    .dout(grp_fu_409_p2)
);

QuantumMonteCarloU50_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U505(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dHTmp_1_fu_580_p3),
    .din1(div_reg_829),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_415_p2)
);

QuantumMonteCarloU50_mux_1664_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 64 ),
    .dout_WIDTH( 16 ))
mux_1664_16_1_1_U506(
    .din0(trotters_q0),
    .din1(trotters1_q0),
    .din2(trotters2_q0),
    .din3(trotters3_q0),
    .din4(trotters4_q0),
    .din5(trotters5_q0),
    .din6(trotters6_q0),
    .din7(trotters7_q0),
    .din8(trotters8_q0),
    .din9(trotters9_q0),
    .din10(trotters10_q0),
    .din11(trotters11_q0),
    .din12(trotters12_q0),
    .din13(trotters13_q0),
    .din14(trotters14_q0),
    .din15(trotters15_q0),
    .din16(p_Val2_s_fu_518_p17),
    .dout(p_Val2_s_fu_518_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (xor_ln1049_reg_723 == 1'd0))) begin
        add4_reg_734 <= grp_fu_400_p2;
        sub_reg_729 <= grp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        and_ln136_1_reg_877 <= and_ln136_1_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        dHTmp_reg_846 <= grp_fu_404_p2;
        p_Result_1_reg_840 <= p_Result_1_fu_559_p3;
        p_Val2_s_reg_835 <= p_Val2_s_fu_518_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        div_reg_829 <= grp_fu_409_p2;
        trotters10_addr_reg_799 <= zext_ln819_1_fu_495_p1;
        trotters11_addr_reg_804 <= zext_ln819_1_fu_495_p1;
        trotters12_addr_reg_809 <= zext_ln819_1_fu_495_p1;
        trotters13_addr_reg_814 <= zext_ln819_1_fu_495_p1;
        trotters14_addr_reg_819 <= zext_ln819_1_fu_495_p1;
        trotters15_addr_reg_824 <= zext_ln819_1_fu_495_p1;
        trotters1_addr_reg_754 <= zext_ln819_1_fu_495_p1;
        trotters2_addr_reg_759 <= zext_ln819_1_fu_495_p1;
        trotters3_addr_reg_764 <= zext_ln819_1_fu_495_p1;
        trotters4_addr_reg_769 <= zext_ln819_1_fu_495_p1;
        trotters5_addr_reg_774 <= zext_ln819_1_fu_495_p1;
        trotters6_addr_reg_779 <= zext_ln819_1_fu_495_p1;
        trotters7_addr_reg_784 <= zext_ln819_1_fu_495_p1;
        trotters8_addr_reg_789 <= zext_ln819_1_fu_495_p1;
        trotters9_addr_reg_794 <= zext_ln819_1_fu_495_p1;
        trotters_addr_reg_749 <= zext_ln819_1_fu_495_p1;
        trunc_ln819_reg_744 <= trunc_ln819_fu_483_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln136_1_reg_862 <= icmp_ln136_1_fu_628_p2;
        icmp_ln136_2_reg_867 <= icmp_ln136_2_fu_634_p2;
        icmp_ln136_3_reg_872 <= icmp_ln136_3_fu_640_p2;
        icmp_ln136_reg_857 <= icmp_ln136_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        inside_reg_719 <= inside_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == and_ln136_1_fu_660_p2))) begin
        p_Result_s_reg_881 <= p_Result_s_fu_671_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        select_ln1049_reg_739 <= select_ln1049_fu_477_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (inside_fu_449_p2 == 1'd1))) begin
        xor_ln1049_reg_723 <= xor_ln1049_fu_455_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters10_address0 = trotters10_addr_reg_799;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters10_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters10_ce0 = 1'b1;
    end else begin
        trotters10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd10) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters10_we0 = 1'b1;
    end else begin
        trotters10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters11_address0 = trotters11_addr_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters11_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters11_ce0 = 1'b1;
    end else begin
        trotters11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd11) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters11_we0 = 1'b1;
    end else begin
        trotters11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters12_address0 = trotters12_addr_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters12_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters12_ce0 = 1'b1;
    end else begin
        trotters12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd12) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters12_we0 = 1'b1;
    end else begin
        trotters12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters13_address0 = trotters13_addr_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters13_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters13_ce0 = 1'b1;
    end else begin
        trotters13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd13) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters13_we0 = 1'b1;
    end else begin
        trotters13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters14_address0 = trotters14_addr_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters14_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters14_ce0 = 1'b1;
    end else begin
        trotters14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd14) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters14_we0 = 1'b1;
    end else begin
        trotters14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters15_address0 = trotters15_addr_reg_824;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters15_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters15_ce0 = 1'b1;
    end else begin
        trotters15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd15) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters15_we0 = 1'b1;
    end else begin
        trotters15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters1_address0 = trotters1_addr_reg_754;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters1_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters1_ce0 = 1'b1;
    end else begin
        trotters1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd1) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters1_we0 = 1'b1;
    end else begin
        trotters1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters2_address0 = trotters2_addr_reg_759;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters2_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters2_ce0 = 1'b1;
    end else begin
        trotters2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd2) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters2_we0 = 1'b1;
    end else begin
        trotters2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters3_address0 = trotters3_addr_reg_764;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters3_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters3_ce0 = 1'b1;
    end else begin
        trotters3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd3) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters3_we0 = 1'b1;
    end else begin
        trotters3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters4_address0 = trotters4_addr_reg_769;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters4_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters4_ce0 = 1'b1;
    end else begin
        trotters4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd4) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters4_we0 = 1'b1;
    end else begin
        trotters4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters5_address0 = trotters5_addr_reg_774;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters5_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters5_ce0 = 1'b1;
    end else begin
        trotters5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd5) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters5_we0 = 1'b1;
    end else begin
        trotters5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters6_address0 = trotters6_addr_reg_779;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters6_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters6_ce0 = 1'b1;
    end else begin
        trotters6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd6) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters6_we0 = 1'b1;
    end else begin
        trotters6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters7_address0 = trotters7_addr_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters7_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters7_ce0 = 1'b1;
    end else begin
        trotters7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd7) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters7_we0 = 1'b1;
    end else begin
        trotters7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters8_address0 = trotters8_addr_reg_789;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters8_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters8_ce0 = 1'b1;
    end else begin
        trotters8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd8) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters8_we0 = 1'b1;
    end else begin
        trotters8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters9_address0 = trotters9_addr_reg_794;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters9_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters9_ce0 = 1'b1;
    end else begin
        trotters9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd9) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters9_we0 = 1'b1;
    end else begin
        trotters9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        trotters_address0 = trotters_addr_reg_749;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        trotters_address0 = zext_ln819_1_fu_495_p1;
    end else begin
        trotters_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        trotters_ce0 = 1'b1;
    end else begin
        trotters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln819_reg_744 == 4'd0) & (1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln136_1_reg_877) & (inside_reg_719 == 1'd1))) begin
        trotters_we0 = 1'b1;
    end else begin
        trotters_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (inside_fu_449_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (inside_fu_449_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln122_fu_466_p2 = (xor_ln1049_1_fu_461_p2 & upSpin);

assign and_ln136_1_fu_660_p2 = (grp_fu_415_p2 & and_ln136_fu_654_p2);

assign and_ln136_fu_654_p2 = (or_ln136_fu_646_p2 & or_ln136_1_fu_650_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln132_1_fu_576_p1 = xor_ln132_fu_570_p2;

assign bitcast_ln132_fu_567_p1 = dHTmp_reg_846;

assign bitcast_ln136_1_fu_605_p1 = div_reg_829;

assign bitcast_ln136_fu_587_p1 = dHTmp_1_fu_580_p3;

assign dHTmp_1_fu_580_p3 = ((p_Result_1_reg_840[0:0] == 1'b1) ? bitcast_ln132_1_fu_576_p1 : dHTmp_reg_846);

assign icmp_ln111_1_fu_443_p2 = ((or_ln_fu_435_p3 > stage) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_423_p2 = ((stage < t_offset_cast_fu_419_p1) ? 1'b1 : 1'b0);

assign icmp_ln136_1_fu_628_p2 = ((trunc_ln136_fu_601_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_2_fu_634_p2 = ((tmp_1_fu_608_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln136_3_fu_640_p2 = ((trunc_ln136_1_fu_618_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_622_p2 = ((tmp_fu_591_p4 != 8'd255) ? 1'b1 : 1'b0);

assign inside_fu_449_p2 = (xor_ln111_fu_429_p2 & icmp_ln111_1_fu_443_p2);

assign lshr_ln_fu_486_p4 = {{iPack[7:4]}};

assign or_ln136_1_fu_650_p2 = (icmp_ln136_3_reg_872 | icmp_ln136_2_reg_867);

assign or_ln136_fu_646_p2 = (icmp_ln136_reg_857 | icmp_ln136_1_reg_862);

assign or_ln_fu_435_p3 = {{11'd1024}, {t_offset}};

assign p_Repl2_s_fu_666_p2 = (p_Result_1_reg_840 ^ 1'd1);

assign p_Result_1_fu_559_p3 = p_Val2_s_fu_518_p18[trunc_ln819_1_fu_556_p1];

always @ (*) begin
    p_Result_s_fu_671_p4 = p_Val2_s_reg_835;
    p_Result_s_fu_671_p4[iSpin] = |(p_Repl2_s_fu_666_p2);
end

assign p_Val2_s_fu_518_p17 = trunc_ln819_reg_744;

assign select_ln1049_fu_477_p3 = ((xor_ln1049_reg_723[0:0] == 1'b1) ? dH : select_ln122_fu_471_p3);

assign select_ln122_fu_471_p3 = ((and_ln122_fu_466_p2[0:0] == 1'b1) ? sub_reg_729 : add4_reg_734);

assign t_offset_cast_fu_419_p1 = t_offset;

assign tmp_1_fu_608_p4 = {{bitcast_ln136_1_fu_605_p1[30:23]}};

assign tmp_fu_591_p4 = {{bitcast_ln136_fu_587_p1[30:23]}};

assign trotters10_d0 = p_Result_s_reg_881;

assign trotters11_d0 = p_Result_s_reg_881;

assign trotters12_d0 = p_Result_s_reg_881;

assign trotters13_d0 = p_Result_s_reg_881;

assign trotters14_d0 = p_Result_s_reg_881;

assign trotters15_d0 = p_Result_s_reg_881;

assign trotters1_d0 = p_Result_s_reg_881;

assign trotters2_d0 = p_Result_s_reg_881;

assign trotters3_d0 = p_Result_s_reg_881;

assign trotters4_d0 = p_Result_s_reg_881;

assign trotters5_d0 = p_Result_s_reg_881;

assign trotters6_d0 = p_Result_s_reg_881;

assign trotters7_d0 = p_Result_s_reg_881;

assign trotters8_d0 = p_Result_s_reg_881;

assign trotters9_d0 = p_Result_s_reg_881;

assign trotters_d0 = p_Result_s_reg_881;

assign trunc_ln136_1_fu_618_p1 = bitcast_ln136_1_fu_605_p1[22:0];

assign trunc_ln136_fu_601_p1 = bitcast_ln136_fu_587_p1[22:0];

assign trunc_ln819_1_fu_556_p1 = iSpin[15:0];

assign trunc_ln819_fu_483_p1 = iPack[3:0];

assign xor_ln1049_1_fu_461_p2 = (xor_ln1049_reg_723 ^ 1'd1);

assign xor_ln1049_fu_455_p2 = (upSpin ^ downSpin);

assign xor_ln111_fu_429_p2 = (icmp_ln111_fu_423_p2 ^ 1'd1);

assign xor_ln132_fu_570_p2 = (bitcast_ln132_fu_567_p1 ^ 32'd2147483648);

assign zext_ln819_1_fu_495_p1 = lshr_ln_fu_486_p4;

endmodule //QuantumMonteCarloU50_TrotterUnitFinal

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity QuantumMonteCarloU50_TrotterUnitFinal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    stage : IN STD_LOGIC_VECTOR (12 downto 0);
    iPack : IN STD_LOGIC_VECTOR (7 downto 0);
    iSpin : IN STD_LOGIC_VECTOR (31 downto 0);
    trotters_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters_ce0 : OUT STD_LOGIC;
    trotters_we0 : OUT STD_LOGIC;
    trotters_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters1_ce0 : OUT STD_LOGIC;
    trotters1_we0 : OUT STD_LOGIC;
    trotters1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters2_ce0 : OUT STD_LOGIC;
    trotters2_we0 : OUT STD_LOGIC;
    trotters2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters3_ce0 : OUT STD_LOGIC;
    trotters3_we0 : OUT STD_LOGIC;
    trotters3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters4_ce0 : OUT STD_LOGIC;
    trotters4_we0 : OUT STD_LOGIC;
    trotters4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters5_ce0 : OUT STD_LOGIC;
    trotters5_we0 : OUT STD_LOGIC;
    trotters5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters6_ce0 : OUT STD_LOGIC;
    trotters6_we0 : OUT STD_LOGIC;
    trotters6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters7_ce0 : OUT STD_LOGIC;
    trotters7_we0 : OUT STD_LOGIC;
    trotters7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters8_ce0 : OUT STD_LOGIC;
    trotters8_we0 : OUT STD_LOGIC;
    trotters8_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters8_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters9_ce0 : OUT STD_LOGIC;
    trotters9_we0 : OUT STD_LOGIC;
    trotters9_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters9_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters10_ce0 : OUT STD_LOGIC;
    trotters10_we0 : OUT STD_LOGIC;
    trotters10_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters10_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters11_ce0 : OUT STD_LOGIC;
    trotters11_we0 : OUT STD_LOGIC;
    trotters11_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters11_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters12_ce0 : OUT STD_LOGIC;
    trotters12_we0 : OUT STD_LOGIC;
    trotters12_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters12_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters13_ce0 : OUT STD_LOGIC;
    trotters13_we0 : OUT STD_LOGIC;
    trotters13_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters13_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters14_ce0 : OUT STD_LOGIC;
    trotters14_we0 : OUT STD_LOGIC;
    trotters14_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters14_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    trotters15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    trotters15_ce0 : OUT STD_LOGIC;
    trotters15_we0 : OUT STD_LOGIC;
    trotters15_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trotters15_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dH : IN STD_LOGIC_VECTOR (31 downto 0);
    upSpin : IN STD_LOGIC_VECTOR (0 downto 0);
    downSpin : IN STD_LOGIC_VECTOR (0 downto 0);
    Beta : IN STD_LOGIC_VECTOR (31 downto 0);
    dHTunnel : IN STD_LOGIC_VECTOR (31 downto 0);
    logRandNumber : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of QuantumMonteCarloU50_TrotterUnitFinal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inside_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inside_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add4_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1049_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1049_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln819_fu_483_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln819_reg_744 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trotters_addr_reg_749 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters1_addr_reg_754 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters2_addr_reg_759 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters3_addr_reg_764 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters4_addr_reg_769 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters5_addr_reg_774 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters6_addr_reg_779 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters7_addr_reg_784 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters8_addr_reg_789 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters9_addr_reg_794 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters10_addr_reg_799 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters11_addr_reg_804 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters12_addr_reg_809 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters13_addr_reg_814 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters14_addr_reg_819 : STD_LOGIC_VECTOR (3 downto 0);
    signal trotters15_addr_reg_824 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_518_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_835 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Result_1_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dHTmp_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal dHTmp_1_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln136_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_1_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_1_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_2_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_2_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_3_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_3_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_1_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_1_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Result_s_fu_671_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_881 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln819_1_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal t_offset_cast_fu_419_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln111_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_435_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln111_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1049_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln122_fu_471_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_486_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_fu_518_p17 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln819_1_fu_556_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln132_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln132_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln132_1_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln136_1_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_591_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_fu_601_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_608_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln136_1_fu_618_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln136_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_s_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component QuantumMonteCarloU50_fsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fdiv_32ns_32ns_32_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component QuantumMonteCarloU50_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component QuantumMonteCarloU50_mux_1664_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fsub_32ns_32ns_32_7_full_dsp_1_U501 : component QuantumMonteCarloU50_fsub_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dH,
        din1 => dHTunnel,
        ce => ap_const_logic_1,
        dout => grp_fu_396_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U502 : component QuantumMonteCarloU50_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dH,
        din1 => dHTunnel,
        ce => ap_const_logic_1,
        dout => grp_fu_400_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U503 : component QuantumMonteCarloU50_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln1049_reg_739,
        din1 => ap_const_lv32_40000000,
        ce => ap_const_logic_1,
        dout => grp_fu_404_p2);

    fdiv_32ns_32ns_32_12_no_dsp_1_U504 : component QuantumMonteCarloU50_fdiv_32ns_32ns_32_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => logRandNumber,
        din1 => Beta,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U505 : component QuantumMonteCarloU50_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dHTmp_1_fu_580_p3,
        din1 => div_reg_829,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_415_p2);

    mux_1664_16_1_1_U506 : component QuantumMonteCarloU50_mux_1664_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 64,
        dout_WIDTH => 16)
    port map (
        din0 => trotters_q0,
        din1 => trotters1_q0,
        din2 => trotters2_q0,
        din3 => trotters3_q0,
        din4 => trotters4_q0,
        din5 => trotters5_q0,
        din6 => trotters6_q0,
        din7 => trotters7_q0,
        din8 => trotters8_q0,
        din9 => trotters9_q0,
        din10 => trotters10_q0,
        din11 => trotters11_q0,
        din12 => trotters12_q0,
        din13 => trotters13_q0,
        din14 => trotters14_q0,
        din15 => trotters15_q0,
        din16 => p_Val2_s_fu_518_p17,
        dout => p_Val2_s_fu_518_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (xor_ln1049_reg_723 = ap_const_lv1_0))) then
                add4_reg_734 <= grp_fu_400_p2;
                sub_reg_729 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                and_ln136_1_reg_877 <= and_ln136_1_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                dHTmp_reg_846 <= grp_fu_404_p2;
                p_Result_1_reg_840 <= p_Result_1_fu_559_p3;
                p_Val2_s_reg_835 <= p_Val2_s_fu_518_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                div_reg_829 <= grp_fu_409_p2;
                trotters10_addr_reg_799 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters11_addr_reg_804 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters12_addr_reg_809 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters13_addr_reg_814 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters14_addr_reg_819 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters15_addr_reg_824 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters1_addr_reg_754 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters2_addr_reg_759 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters3_addr_reg_764 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters4_addr_reg_769 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters5_addr_reg_774 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters6_addr_reg_779 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters7_addr_reg_784 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters8_addr_reg_789 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters9_addr_reg_794 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trotters_addr_reg_749 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
                trunc_ln819_reg_744 <= trunc_ln819_fu_483_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                icmp_ln136_1_reg_862 <= icmp_ln136_1_fu_628_p2;
                icmp_ln136_2_reg_867 <= icmp_ln136_2_fu_634_p2;
                icmp_ln136_3_reg_872 <= icmp_ln136_3_fu_640_p2;
                icmp_ln136_reg_857 <= icmp_ln136_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                inside_reg_719 <= inside_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = and_ln136_1_fu_660_p2))) then
                p_Result_s_reg_881 <= p_Result_s_fu_671_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln1049_reg_739 <= select_ln1049_fu_477_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (inside_fu_449_p2 = ap_const_lv1_1))) then
                xor_ln1049_reg_723 <= xor_ln1049_fu_455_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inside_fu_449_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (inside_fu_449_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (inside_fu_449_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln122_fu_466_p2 <= (xor_ln1049_1_fu_461_p2 and upSpin);
    and_ln136_1_fu_660_p2 <= (grp_fu_415_p2 and and_ln136_fu_654_p2);
    and_ln136_fu_654_p2 <= (or_ln136_fu_646_p2 and or_ln136_1_fu_650_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln132_1_fu_576_p1 <= xor_ln132_fu_570_p2;
    bitcast_ln132_fu_567_p1 <= dHTmp_reg_846;
    bitcast_ln136_1_fu_605_p1 <= div_reg_829;
    bitcast_ln136_fu_587_p1 <= dHTmp_1_fu_580_p3;
    dHTmp_1_fu_580_p3 <= 
        bitcast_ln132_1_fu_576_p1 when (p_Result_1_reg_840(0) = '1') else 
        dHTmp_reg_846;
    icmp_ln111_1_fu_443_p2 <= "1" when (unsigned(or_ln_fu_435_p3) > unsigned(stage)) else "0";
    icmp_ln111_fu_423_p2 <= "1" when (unsigned(stage) < unsigned(t_offset_cast_fu_419_p1)) else "0";
    icmp_ln136_1_fu_628_p2 <= "1" when (trunc_ln136_fu_601_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_2_fu_634_p2 <= "0" when (tmp_1_fu_608_p4 = ap_const_lv8_FF) else "1";
    icmp_ln136_3_fu_640_p2 <= "1" when (trunc_ln136_1_fu_618_p1 = ap_const_lv23_0) else "0";
    icmp_ln136_fu_622_p2 <= "0" when (tmp_fu_591_p4 = ap_const_lv8_FF) else "1";
    inside_fu_449_p2 <= (xor_ln111_fu_429_p2 and icmp_ln111_1_fu_443_p2);
    lshr_ln_fu_486_p4 <= iPack(7 downto 4);
    or_ln136_1_fu_650_p2 <= (icmp_ln136_3_reg_872 or icmp_ln136_2_reg_867);
    or_ln136_fu_646_p2 <= (icmp_ln136_reg_857 or icmp_ln136_1_reg_862);
    or_ln_fu_435_p3 <= (ap_const_lv11_400 & t_offset);
    p_Repl2_s_fu_666_p2 <= (p_Result_1_reg_840 xor ap_const_lv1_1);
    p_Result_1_fu_559_p3 <= p_Val2_s_fu_518_p18(to_integer(unsigned(trunc_ln819_1_fu_556_p1)) downto to_integer(unsigned(trunc_ln819_1_fu_556_p1))) when (to_integer(unsigned(trunc_ln819_1_fu_556_p1))>= 0 and to_integer(unsigned(trunc_ln819_1_fu_556_p1))<=15) else "-";
    
    p_Result_s_fu_671_p4_proc : process(p_Val2_s_reg_835, iSpin, p_Repl2_s_fu_666_p2)
    begin
        p_Result_s_fu_671_p4 <= p_Val2_s_reg_835;
        if to_integer(unsigned(iSpin)) >= p_Val2_s_reg_835'low and to_integer(unsigned(iSpin)) <= p_Val2_s_reg_835'high then
            p_Result_s_fu_671_p4(to_integer(unsigned(iSpin))) <= p_Repl2_s_fu_666_p2(0);
        end if;
    end process;

    p_Val2_s_fu_518_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln819_reg_744),64));
    select_ln1049_fu_477_p3 <= 
        dH when (xor_ln1049_reg_723(0) = '1') else 
        select_ln122_fu_471_p3;
    select_ln122_fu_471_p3 <= 
        sub_reg_729 when (and_ln122_fu_466_p2(0) = '1') else 
        add4_reg_734;
    t_offset_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_offset),13));
    tmp_1_fu_608_p4 <= bitcast_ln136_1_fu_605_p1(30 downto 23);
    tmp_fu_591_p4 <= bitcast_ln136_fu_587_p1(30 downto 23);

    trotters10_address0_assign_proc : process(ap_CS_fsm_state12, trotters10_addr_reg_799, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters10_address0 <= trotters10_addr_reg_799;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters10_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters10_address0 <= "XXXX";
        end if; 
    end process;


    trotters10_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters10_ce0 <= ap_const_logic_1;
        else 
            trotters10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters10_d0 <= p_Result_s_reg_881;

    trotters10_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_A) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters10_we0 <= ap_const_logic_1;
        else 
            trotters10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters11_address0_assign_proc : process(ap_CS_fsm_state12, trotters11_addr_reg_804, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters11_address0 <= trotters11_addr_reg_804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters11_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters11_address0 <= "XXXX";
        end if; 
    end process;


    trotters11_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters11_ce0 <= ap_const_logic_1;
        else 
            trotters11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters11_d0 <= p_Result_s_reg_881;

    trotters11_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters11_we0 <= ap_const_logic_1;
        else 
            trotters11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters12_address0_assign_proc : process(ap_CS_fsm_state12, trotters12_addr_reg_809, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters12_address0 <= trotters12_addr_reg_809;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters12_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters12_address0 <= "XXXX";
        end if; 
    end process;


    trotters12_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters12_ce0 <= ap_const_logic_1;
        else 
            trotters12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters12_d0 <= p_Result_s_reg_881;

    trotters12_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_C) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters12_we0 <= ap_const_logic_1;
        else 
            trotters12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters13_address0_assign_proc : process(ap_CS_fsm_state12, trotters13_addr_reg_814, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters13_address0 <= trotters13_addr_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters13_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters13_address0 <= "XXXX";
        end if; 
    end process;


    trotters13_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters13_ce0 <= ap_const_logic_1;
        else 
            trotters13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters13_d0 <= p_Result_s_reg_881;

    trotters13_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_D) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters13_we0 <= ap_const_logic_1;
        else 
            trotters13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters14_address0_assign_proc : process(ap_CS_fsm_state12, trotters14_addr_reg_819, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters14_address0 <= trotters14_addr_reg_819;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters14_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters14_address0 <= "XXXX";
        end if; 
    end process;


    trotters14_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters14_ce0 <= ap_const_logic_1;
        else 
            trotters14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters14_d0 <= p_Result_s_reg_881;

    trotters14_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_E) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters14_we0 <= ap_const_logic_1;
        else 
            trotters14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters15_address0_assign_proc : process(ap_CS_fsm_state12, trotters15_addr_reg_824, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters15_address0 <= trotters15_addr_reg_824;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters15_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters15_address0 <= "XXXX";
        end if; 
    end process;


    trotters15_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters15_ce0 <= ap_const_logic_1;
        else 
            trotters15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters15_d0 <= p_Result_s_reg_881;

    trotters15_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_F) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters15_we0 <= ap_const_logic_1;
        else 
            trotters15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters1_address0_assign_proc : process(ap_CS_fsm_state12, trotters1_addr_reg_754, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters1_address0 <= trotters1_addr_reg_754;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters1_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters1_address0 <= "XXXX";
        end if; 
    end process;


    trotters1_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters1_ce0 <= ap_const_logic_1;
        else 
            trotters1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters1_d0 <= p_Result_s_reg_881;

    trotters1_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters1_we0 <= ap_const_logic_1;
        else 
            trotters1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters2_address0_assign_proc : process(ap_CS_fsm_state12, trotters2_addr_reg_759, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters2_address0 <= trotters2_addr_reg_759;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters2_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters2_address0 <= "XXXX";
        end if; 
    end process;


    trotters2_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters2_ce0 <= ap_const_logic_1;
        else 
            trotters2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters2_d0 <= p_Result_s_reg_881;

    trotters2_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters2_we0 <= ap_const_logic_1;
        else 
            trotters2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters3_address0_assign_proc : process(ap_CS_fsm_state12, trotters3_addr_reg_764, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters3_address0 <= trotters3_addr_reg_764;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters3_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters3_address0 <= "XXXX";
        end if; 
    end process;


    trotters3_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters3_ce0 <= ap_const_logic_1;
        else 
            trotters3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters3_d0 <= p_Result_s_reg_881;

    trotters3_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters3_we0 <= ap_const_logic_1;
        else 
            trotters3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters4_address0_assign_proc : process(ap_CS_fsm_state12, trotters4_addr_reg_769, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters4_address0 <= trotters4_addr_reg_769;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters4_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters4_address0 <= "XXXX";
        end if; 
    end process;


    trotters4_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters4_ce0 <= ap_const_logic_1;
        else 
            trotters4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters4_d0 <= p_Result_s_reg_881;

    trotters4_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters4_we0 <= ap_const_logic_1;
        else 
            trotters4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters5_address0_assign_proc : process(ap_CS_fsm_state12, trotters5_addr_reg_774, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters5_address0 <= trotters5_addr_reg_774;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters5_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters5_address0 <= "XXXX";
        end if; 
    end process;


    trotters5_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters5_ce0 <= ap_const_logic_1;
        else 
            trotters5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters5_d0 <= p_Result_s_reg_881;

    trotters5_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters5_we0 <= ap_const_logic_1;
        else 
            trotters5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters6_address0_assign_proc : process(ap_CS_fsm_state12, trotters6_addr_reg_779, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters6_address0 <= trotters6_addr_reg_779;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters6_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters6_address0 <= "XXXX";
        end if; 
    end process;


    trotters6_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters6_ce0 <= ap_const_logic_1;
        else 
            trotters6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters6_d0 <= p_Result_s_reg_881;

    trotters6_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters6_we0 <= ap_const_logic_1;
        else 
            trotters6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters7_address0_assign_proc : process(ap_CS_fsm_state12, trotters7_addr_reg_784, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters7_address0 <= trotters7_addr_reg_784;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters7_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters7_address0 <= "XXXX";
        end if; 
    end process;


    trotters7_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters7_ce0 <= ap_const_logic_1;
        else 
            trotters7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters7_d0 <= p_Result_s_reg_881;

    trotters7_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters7_we0 <= ap_const_logic_1;
        else 
            trotters7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters8_address0_assign_proc : process(ap_CS_fsm_state12, trotters8_addr_reg_789, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters8_address0 <= trotters8_addr_reg_789;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters8_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters8_address0 <= "XXXX";
        end if; 
    end process;


    trotters8_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters8_ce0 <= ap_const_logic_1;
        else 
            trotters8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters8_d0 <= p_Result_s_reg_881;

    trotters8_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters8_we0 <= ap_const_logic_1;
        else 
            trotters8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters9_address0_assign_proc : process(ap_CS_fsm_state12, trotters9_addr_reg_794, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters9_address0 <= trotters9_addr_reg_794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters9_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters9_address0 <= "XXXX";
        end if; 
    end process;


    trotters9_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters9_ce0 <= ap_const_logic_1;
        else 
            trotters9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters9_d0 <= p_Result_s_reg_881;

    trotters9_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_9) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters9_we0 <= ap_const_logic_1;
        else 
            trotters9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    trotters_address0_assign_proc : process(ap_CS_fsm_state12, trotters_addr_reg_749, zext_ln819_1_fu_495_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            trotters_address0 <= trotters_addr_reg_749;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            trotters_address0 <= zext_ln819_1_fu_495_p1(4 - 1 downto 0);
        else 
            trotters_address0 <= "XXXX";
        end if; 
    end process;


    trotters_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            trotters_ce0 <= ap_const_logic_1;
        else 
            trotters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trotters_d0 <= p_Result_s_reg_881;

    trotters_we0_assign_proc : process(inside_reg_719, trunc_ln819_reg_744, and_ln136_1_reg_877, ap_CS_fsm_state16)
    begin
        if (((trunc_ln819_reg_744 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln136_1_reg_877) and (inside_reg_719 = ap_const_lv1_1))) then 
            trotters_we0 <= ap_const_logic_1;
        else 
            trotters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln136_1_fu_618_p1 <= bitcast_ln136_1_fu_605_p1(23 - 1 downto 0);
    trunc_ln136_fu_601_p1 <= bitcast_ln136_fu_587_p1(23 - 1 downto 0);
    trunc_ln819_1_fu_556_p1 <= iSpin(16 - 1 downto 0);
    trunc_ln819_fu_483_p1 <= iPack(4 - 1 downto 0);
    xor_ln1049_1_fu_461_p2 <= (xor_ln1049_reg_723 xor ap_const_lv1_1);
    xor_ln1049_fu_455_p2 <= (upSpin xor downSpin);
    xor_ln111_fu_429_p2 <= (icmp_ln111_fu_423_p2 xor ap_const_lv1_1);
    xor_ln132_fu_570_p2 <= (bitcast_ln132_fu_567_p1 xor ap_const_lv32_80000000);
    zext_ln819_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_486_p4),64));
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QuantumMonteCarloU50_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln234,
        JcoupLocal_0_0_address0,
        JcoupLocal_0_0_ce0,
        JcoupLocal_0_0_we0,
        JcoupLocal_0_0_d0,
        JcoupLocal_0_1_address0,
        JcoupLocal_0_1_ce0,
        JcoupLocal_0_1_we0,
        JcoupLocal_0_1_d0,
        JcoupLocal_0_2_address0,
        JcoupLocal_0_2_ce0,
        JcoupLocal_0_2_we0,
        JcoupLocal_0_2_d0,
        JcoupLocal_0_3_address0,
        JcoupLocal_0_3_ce0,
        JcoupLocal_0_3_we0,
        JcoupLocal_0_3_d0,
        JcoupLocal_0_4_address0,
        JcoupLocal_0_4_ce0,
        JcoupLocal_0_4_we0,
        JcoupLocal_0_4_d0,
        JcoupLocal_0_5_address0,
        JcoupLocal_0_5_ce0,
        JcoupLocal_0_5_we0,
        JcoupLocal_0_5_d0,
        JcoupLocal_0_6_address0,
        JcoupLocal_0_6_ce0,
        JcoupLocal_0_6_we0,
        JcoupLocal_0_6_d0,
        JcoupLocal_0_7_address0,
        JcoupLocal_0_7_ce0,
        JcoupLocal_0_7_we0,
        JcoupLocal_0_7_d0,
        JcoupLocal_0_8_address0,
        JcoupLocal_0_8_ce0,
        JcoupLocal_0_8_we0,
        JcoupLocal_0_8_d0,
        JcoupLocal_0_9_address0,
        JcoupLocal_0_9_ce0,
        JcoupLocal_0_9_we0,
        JcoupLocal_0_9_d0,
        JcoupLocal_0_10_address0,
        JcoupLocal_0_10_ce0,
        JcoupLocal_0_10_we0,
        JcoupLocal_0_10_d0,
        JcoupLocal_0_11_address0,
        JcoupLocal_0_11_ce0,
        JcoupLocal_0_11_we0,
        JcoupLocal_0_11_d0,
        JcoupLocal_0_12_address0,
        JcoupLocal_0_12_ce0,
        JcoupLocal_0_12_we0,
        JcoupLocal_0_12_d0,
        JcoupLocal_0_13_address0,
        JcoupLocal_0_13_ce0,
        JcoupLocal_0_13_we0,
        JcoupLocal_0_13_d0,
        JcoupLocal_0_14_address0,
        JcoupLocal_0_14_ce0,
        JcoupLocal_0_14_we0,
        JcoupLocal_0_14_d0,
        JcoupLocal_0_15_address0,
        JcoupLocal_0_15_ce0,
        JcoupLocal_0_15_we0,
        JcoupLocal_0_15_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [57:0] sext_ln234;
output  [3:0] JcoupLocal_0_0_address0;
output   JcoupLocal_0_0_ce0;
output   JcoupLocal_0_0_we0;
output  [511:0] JcoupLocal_0_0_d0;
output  [3:0] JcoupLocal_0_1_address0;
output   JcoupLocal_0_1_ce0;
output   JcoupLocal_0_1_we0;
output  [511:0] JcoupLocal_0_1_d0;
output  [3:0] JcoupLocal_0_2_address0;
output   JcoupLocal_0_2_ce0;
output   JcoupLocal_0_2_we0;
output  [511:0] JcoupLocal_0_2_d0;
output  [3:0] JcoupLocal_0_3_address0;
output   JcoupLocal_0_3_ce0;
output   JcoupLocal_0_3_we0;
output  [511:0] JcoupLocal_0_3_d0;
output  [3:0] JcoupLocal_0_4_address0;
output   JcoupLocal_0_4_ce0;
output   JcoupLocal_0_4_we0;
output  [511:0] JcoupLocal_0_4_d0;
output  [3:0] JcoupLocal_0_5_address0;
output   JcoupLocal_0_5_ce0;
output   JcoupLocal_0_5_we0;
output  [511:0] JcoupLocal_0_5_d0;
output  [3:0] JcoupLocal_0_6_address0;
output   JcoupLocal_0_6_ce0;
output   JcoupLocal_0_6_we0;
output  [511:0] JcoupLocal_0_6_d0;
output  [3:0] JcoupLocal_0_7_address0;
output   JcoupLocal_0_7_ce0;
output   JcoupLocal_0_7_we0;
output  [511:0] JcoupLocal_0_7_d0;
output  [3:0] JcoupLocal_0_8_address0;
output   JcoupLocal_0_8_ce0;
output   JcoupLocal_0_8_we0;
output  [511:0] JcoupLocal_0_8_d0;
output  [3:0] JcoupLocal_0_9_address0;
output   JcoupLocal_0_9_ce0;
output   JcoupLocal_0_9_we0;
output  [511:0] JcoupLocal_0_9_d0;
output  [3:0] JcoupLocal_0_10_address0;
output   JcoupLocal_0_10_ce0;
output   JcoupLocal_0_10_we0;
output  [511:0] JcoupLocal_0_10_d0;
output  [3:0] JcoupLocal_0_11_address0;
output   JcoupLocal_0_11_ce0;
output   JcoupLocal_0_11_we0;
output  [511:0] JcoupLocal_0_11_d0;
output  [3:0] JcoupLocal_0_12_address0;
output   JcoupLocal_0_12_ce0;
output   JcoupLocal_0_12_we0;
output  [511:0] JcoupLocal_0_12_d0;
output  [3:0] JcoupLocal_0_13_address0;
output   JcoupLocal_0_13_ce0;
output   JcoupLocal_0_13_we0;
output  [511:0] JcoupLocal_0_13_d0;
output  [3:0] JcoupLocal_0_14_address0;
output   JcoupLocal_0_14_ce0;
output   JcoupLocal_0_14_we0;
output  [511:0] JcoupLocal_0_14_d0;
output  [3:0] JcoupLocal_0_15_address0;
output   JcoupLocal_0_15_ce0;
output   JcoupLocal_0_15_we0;
output  [511:0] JcoupLocal_0_15_d0;

reg ap_idle;
reg m_axi_gmem_RREADY;
reg JcoupLocal_0_0_ce0;
reg JcoupLocal_0_0_we0;
reg JcoupLocal_0_1_ce0;
reg JcoupLocal_0_1_we0;
reg JcoupLocal_0_2_ce0;
reg JcoupLocal_0_2_we0;
reg JcoupLocal_0_3_ce0;
reg JcoupLocal_0_3_we0;
reg JcoupLocal_0_4_ce0;
reg JcoupLocal_0_4_we0;
reg JcoupLocal_0_5_ce0;
reg JcoupLocal_0_5_we0;
reg JcoupLocal_0_6_ce0;
reg JcoupLocal_0_6_we0;
reg JcoupLocal_0_7_ce0;
reg JcoupLocal_0_7_we0;
reg JcoupLocal_0_8_ce0;
reg JcoupLocal_0_8_we0;
reg JcoupLocal_0_9_ce0;
reg JcoupLocal_0_9_we0;
reg JcoupLocal_0_10_ce0;
reg JcoupLocal_0_10_we0;
reg JcoupLocal_0_11_ce0;
reg JcoupLocal_0_11_we0;
reg JcoupLocal_0_12_ce0;
reg JcoupLocal_0_12_we0;
reg JcoupLocal_0_13_ce0;
reg JcoupLocal_0_13_we0;
reg JcoupLocal_0_14_ce0;
reg JcoupLocal_0_14_we0;
reg JcoupLocal_0_15_ce0;
reg JcoupLocal_0_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln234_reg_417;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln234_fu_349_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln236_fu_361_p1;
reg   [3:0] trunc_ln236_reg_421;
reg   [3:0] trunc_ln236_reg_421_pp0_iter1_reg;
reg   [3:0] lshr_ln236_s_reg_425;
reg   [3:0] lshr_ln236_s_reg_425_pp0_iter1_reg;
reg   [511:0] gmem_addr_read_reg_430;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln236_fu_386_p1;
reg   [8:0] packOfst_fu_114;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_packOfst_2;
wire   [8:0] add_ln234_fu_355_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

QuantumMonteCarloU50_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln234_fu_349_p2 == 1'd0))) begin
            packOfst_fu_114 <= add_ln234_fu_355_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            packOfst_fu_114 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln234_reg_417 <= icmp_ln234_fu_349_p2;
        lshr_ln236_s_reg_425_pp0_iter1_reg <= lshr_ln236_s_reg_425;
        trunc_ln236_reg_421_pp0_iter1_reg <= trunc_ln236_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln234_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_read_reg_430 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln234_fu_349_p2 == 1'd0))) begin
        lshr_ln236_s_reg_425 <= {{ap_sig_allocacmp_packOfst_2[7:4]}};
        trunc_ln236_reg_421 <= trunc_ln236_fu_361_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_0_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd0))) begin
        JcoupLocal_0_0_we0 = 1'b1;
    end else begin
        JcoupLocal_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_10_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd10))) begin
        JcoupLocal_0_10_we0 = 1'b1;
    end else begin
        JcoupLocal_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_11_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd11))) begin
        JcoupLocal_0_11_we0 = 1'b1;
    end else begin
        JcoupLocal_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_12_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd12))) begin
        JcoupLocal_0_12_we0 = 1'b1;
    end else begin
        JcoupLocal_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_13_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd13))) begin
        JcoupLocal_0_13_we0 = 1'b1;
    end else begin
        JcoupLocal_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_14_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd14))) begin
        JcoupLocal_0_14_we0 = 1'b1;
    end else begin
        JcoupLocal_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_15_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd15))) begin
        JcoupLocal_0_15_we0 = 1'b1;
    end else begin
        JcoupLocal_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_1_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd1))) begin
        JcoupLocal_0_1_we0 = 1'b1;
    end else begin
        JcoupLocal_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_2_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd2))) begin
        JcoupLocal_0_2_we0 = 1'b1;
    end else begin
        JcoupLocal_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_3_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd3))) begin
        JcoupLocal_0_3_we0 = 1'b1;
    end else begin
        JcoupLocal_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_4_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd4))) begin
        JcoupLocal_0_4_we0 = 1'b1;
    end else begin
        JcoupLocal_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_5_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd5))) begin
        JcoupLocal_0_5_we0 = 1'b1;
    end else begin
        JcoupLocal_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_6_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd6))) begin
        JcoupLocal_0_6_we0 = 1'b1;
    end else begin
        JcoupLocal_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_7_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd7))) begin
        JcoupLocal_0_7_we0 = 1'b1;
    end else begin
        JcoupLocal_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_8_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd8))) begin
        JcoupLocal_0_8_we0 = 1'b1;
    end else begin
        JcoupLocal_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        JcoupLocal_0_9_ce0 = 1'b1;
    end else begin
        JcoupLocal_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln236_reg_421_pp0_iter1_reg == 4'd9))) begin
        JcoupLocal_0_9_we0 = 1'b1;
    end else begin
        JcoupLocal_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln234_fu_349_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln234_reg_417 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_packOfst_2 = 9'd0;
    end else begin
        ap_sig_allocacmp_packOfst_2 = packOfst_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln234_reg_417 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln234_reg_417 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign JcoupLocal_0_0_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_0_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_10_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_10_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_11_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_11_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_12_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_12_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_13_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_13_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_14_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_14_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_15_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_15_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_1_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_1_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_2_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_2_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_3_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_3_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_4_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_4_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_5_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_5_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_6_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_6_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_7_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_7_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_8_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_8_d0 = gmem_addr_read_reg_430;

assign JcoupLocal_0_9_address0 = zext_ln236_fu_386_p1;

assign JcoupLocal_0_9_d0 = gmem_addr_read_reg_430;

assign add_ln234_fu_355_p2 = (ap_sig_allocacmp_packOfst_2 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln234_reg_417 == 1'd0) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln234_reg_417 == 1'd0) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln234_reg_417 == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln234_fu_349_p2 = ((ap_sig_allocacmp_packOfst_2 == 9'd256) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign trunc_ln236_fu_361_p1 = ap_sig_allocacmp_packOfst_2[3:0];

assign zext_ln236_fu_386_p1 = lshr_ln236_s_reg_425_pp0_iter1_reg;

endmodule //QuantumMonteCarloU50_QuantumMonteCarloU50_Pipeline_READ_NEW_JCOUP
